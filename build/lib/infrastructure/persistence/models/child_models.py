"""from datetime import datetime, timezonefrom typing import Optional, List, Dict, Anyimport uuidfrom sqlalchemy import ("""Child Profile ModelsEnterprise-grade models for child profiles with COPPA compliance"""    Column, String, DateTime, Boolean, Integer, Float,    ForeignKey, Index, CheckConstraint, Enum as SQLEnum)from sqlalchemy.dialects.postgresql import UUID, JSONB, ARRAYfrom sqlalchemy.orm import relationship, Mapped, mapped_columnfrom src.domain.value_objects.child_age import ChildAgefrom src.domain.value_objects.safety_level import SafetyLevelfrom src.infrastructure.persistence.models.base import Baseclass ChildModel(Base):    """Child profile model with COPPA compliance."""    __tablename__ = "children"    # Primary key    id: Mapped[str] = mapped_column(        UUID(as_uuid=False),        primary_key=True,        default=lambda: str(uuid.uuid4())    )    # Relationship to parent    parent_id: Mapped[str] = mapped_column(        UUID(as_uuid=False),        ForeignKey("parents.id", ondelete="CASCADE"),        nullable=False,        index=True    )    # Basic information (encrypted)    name_encrypted: Mapped[str] = mapped_column(String(500), nullable=False)    age: Mapped[int] = mapped_column(Integer, nullable=False)    age_group: Mapped[ChildAge] = mapped_column(SQLEnum(ChildAge), nullable=False)    # Preferences and interests    interests: Mapped[list] = mapped_column(ARRAY(String), default=list)    language: Mapped[str] = mapped_column(String(10), default="en", nullable=False)    personality_traits: Mapped[dict] = mapped_column(JSONB, default=dict)    learning_goals: Mapped[dict] = mapped_column(JSONB, default=dict)    # Safety settings    safety_level: Mapped[SafetyLevel] = mapped_column(        SQLEnum(SafetyLevel),        default=SafetyLevel.HIGH,        nullable=False    )    content_filters: Mapped[dict] = mapped_column(JSONB, default=dict)    # Usage tracking    total_interactions: Mapped[int] = mapped_column(Integer, default=0, nullable=False)    last_interaction: Mapped[Optional[datetime]] = mapped_column(DateTime(timezone=True))    # Status    is_active: Mapped[bool] = mapped_column(Boolean, default=True, nullable=False)    # Audit fields    created_at: Mapped[datetime] = mapped_column(        DateTime(timezone=True),        default=lambda: datetime.now(timezone.utc),        nullable=False    )    updated_at: Mapped[datetime] = mapped_column(        DateTime(timezone=True),        default=lambda: datetime.now(timezone.utc),        onupdate=lambda: datetime.now(timezone.utc),        nullable=False    )    # COPPA compliance - data retention    data_retention_until: Mapped[datetime] = mapped_column(        DateTime(timezone=True),        nullable=False    )    # Relationships    parent: Mapped["ParentModel"] = relationship("ParentModel", back_populates="children")    conversations: Mapped[List["ConversationModel"]] = relationship(        "ConversationModel",        back_populates="child",        cascade="all, delete-orphan"    )    safety_events: Mapped[List["SafetyEventModel"]] = relationship(        "SafetyEventModel",        back_populates="child"    )    # Indexes and constraints    __table_args__ = (        Index("idx_child_parent_active", "parent_id", "is_active"),        Index("idx_child_age_group", "age_group"),        Index("idx_child_last_interaction", "last_interaction"),        Index("idx_child_retention_date", "data_retention_until"),        CheckConstraint("age >= 1 AND age <= 13", name="chk_coppa_age"),        CheckConstraint("total_interactions >= 0", name="chk_interactions_positive"),    )    def to_dict(self) -> Dict[str, Any]:        """Convert model to dictionary for API responses."""        return {            "id": self.id,            "parent_id": self.parent_id,            "age": self.age,            "age_group": self.age_group.value if self.age_group else None,            "interests": self.interests,            "language": self.language,            "safety_level": self.safety_level.value if self.safety_level else None,            "total_interactions": self.total_interactions,            "last_interaction": self.last_interaction.isoformat() if self.last_interaction else None,            "is_active": self.is_active,            "created_at": self.created_at.isoformat(),        }