"""from datetime import datetime, timezonefrom typing import Optional, Dict, Anyimport uuidfrom sqlalchemy import ("""COPPA Consent and Safety Event ModelsEnterprise-grade models for child safety and compliance tracking"""    Column, String, DateTime, Boolean, Integer,    ForeignKey, Text, Index, Enum as SQLEnum)from sqlalchemy.dialects.postgresql import UUID, JSONBfrom sqlalchemy.orm import relationship, Mapped, mapped_columnimport enumfrom src.infrastructure.persistence.models.base import Baseclass ConsentType(enum.Enum):    """Types of parental consent."""    DATA_COLLECTION = "data_collection"    VOICE_RECORDING = "voice_recording"    USAGE_ANALYTICS = "usage_analytics"    MARKETING = "marketing"class SafetyEventType(enum.Enum):    """Types of safety events."""    CONTENT_FILTERED = "content_filtered"    INAPPROPRIATE_REQUEST = "inappropriate_request"    EXCESSIVE_USAGE = "excessive_usage"    PARENTAL_ALERT = "parental_alert"class ConsentModel(Base):    """Parental consent tracking model with COPPA compliance."""    __tablename__ = "consents"    # Primary key    id: Mapped[str] = mapped_column(        UUID(as_uuid=False),        primary_key=True,        default=lambda: str(uuid.uuid4())    )    # Relationships    parent_id: Mapped[str] = mapped_column(        UUID(as_uuid=False),        ForeignKey("parents.id", ondelete="CASCADE"),        nullable=False,        index=True    )    # Consent details    consent_type: Mapped[ConsentType] = mapped_column(        SQLEnum(ConsentType),        nullable=False    )    granted: Mapped[bool] = mapped_column(Boolean, nullable=False)    # Tracking    granted_at: Mapped[datetime] = mapped_column(        DateTime(timezone=True),        default=lambda: datetime.now(timezone.utc),        nullable=False    )    revoked_at: Mapped[Optional[datetime]] = mapped_column(DateTime(timezone=True))    expires_at: Mapped[Optional[datetime]] = mapped_column(DateTime(timezone=True))    # Verification    verification_method: Mapped[str] = mapped_column(String(50), nullable=False)    ip_address: Mapped[str] = mapped_column(String(45), nullable=False)    user_agent: Mapped[str] = mapped_column(String(500), nullable=False)    # Relationships    parent: Mapped["ParentModel"] = relationship("ParentModel", back_populates="consents")    # Indexes    __table_args__ = (        Index("idx_consent_parent_type", "parent_id", "consent_type"),        Index("idx_consent_granted_expires", "granted", "expires_at"),    )class SafetyEventModel(Base):    """Safety events and compliance tracking model."""    __tablename__ = "safety_events"    # Primary key    id: Mapped[str] = mapped_column(        UUID(as_uuid=False),        primary_key=True,        default=lambda: str(uuid.uuid4())    )    # Relationships    child_id: Mapped[str] = mapped_column(        UUID(as_uuid=False),        ForeignKey("children.id", ondelete="CASCADE"),        nullable=False,        index=True    )    parent_id: Mapped[str] = mapped_column(        UUID(as_uuid=False),        ForeignKey("parents.id", ondelete="CASCADE"),        nullable=False,        index=True    )    # Event details    event_type: Mapped[SafetyEventType] = mapped_column(        SQLEnum(SafetyEventType),        nullable=False    )    severity: Mapped[str] = mapped_column(String(20), nullable=False)    description: Mapped[str] = mapped_column(Text, nullable=False)    # Context    trigger_content: Mapped[Optional[str]] = mapped_column(Text)    action_taken: Mapped[str] = mapped_column(String(100), nullable=False)    metadata: Mapped[dict] = mapped_column(JSONB, default=dict)    # Timing    occurred_at: Mapped[datetime] = mapped_column(        DateTime(timezone=True),        default=lambda: datetime.now(timezone.utc),        nullable=False    )    # Resolution    resolved: Mapped[bool] = mapped_column(Boolean, default=False)    resolved_at: Mapped[Optional[datetime]] = mapped_column(DateTime(timezone=True))    resolution_notes: Mapped[Optional[str]] = mapped_column(Text)    # Parent notification    parent_notified: Mapped[bool] = mapped_column(Boolean, default=False)    notification_sent_at: Mapped[Optional[datetime]] = mapped_column(DateTime(timezone=True))    # Relationships    child: Mapped["ChildModel"] = relationship("ChildModel", back_populates="safety_events")    parent: Mapped["ParentModel"] = relationship("ParentModel", back_populates="safety_events")    # Indexes    __table_args__ = (        Index("idx_safety_child_time", "child_id", "occurred_at"),        Index("idx_safety_parent_severity", "parent_id", "severity"),        Index("idx_safety_type_resolved", "event_type", "resolved"),    )    def to_dict(self) -> Dict[str, Any]:        """Convert model to dictionary for API responses."""        return {            "id": self.id,            "child_id": self.child_id,            "parent_id": self.parent_id,            "event_type": self.event_type.value,            "severity": self.severity,            "description": self.description,            "action_taken": self.action_taken,            "occurred_at": self.occurred_at.isoformat(),            "resolved": self.resolved,            "resolved_at": self.resolved_at.isoformat() if self.resolved_at else None,            "parent_notified": self.parent_notified,        }