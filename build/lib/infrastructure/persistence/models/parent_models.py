"""from datetime import datetime, timezonefrom typing import Optional, List, Dict, Anyimport uuidfrom sqlalchemy import ("""Parent/Guardian ModelsEnterprise-grade models for parent authentication and account management"""    Column, String, DateTime, Boolean, Integer,    Index, CheckConstraint)from sqlalchemy.dialects.postgresql import UUID, JSONBfrom sqlalchemy.orm import relationship, Mapped, mapped_columnfrom src.infrastructure.persistence.models.base import Baseclass ParentModel(Base):    """Parent/Guardian model with comprehensive security features."""    __tablename__ = "parents"    # Primary key    id: Mapped[str] = mapped_column(        UUID(as_uuid=False),        primary_key=True,        default=lambda: str(uuid.uuid4())    )    # Authentication fields    email: Mapped[str] = mapped_column(String(255), unique=True, nullable=False, index=True)    password_hash: Mapped[str] = mapped_column(String(255), nullable=False)    # Personal information    name: Mapped[str] = mapped_column(String(100), nullable=False)    phone: Mapped[Optional[str]] = mapped_column(String(20))    # Account status    is_active: Mapped[bool] = mapped_column(Boolean, default=True, nullable=False)    is_verified: Mapped[bool] = mapped_column(Boolean, default=False, nullable=False)    # Security tracking    failed_login_attempts: Mapped[int] = mapped_column(Integer, default=0, nullable=False)    locked_until: Mapped[Optional[datetime]] = mapped_column(DateTime(timezone=True))    last_login: Mapped[Optional[datetime]] = mapped_column(DateTime(timezone=True))    # Audit fields    created_at: Mapped[datetime] = mapped_column(        DateTime(timezone=True),        default=lambda: datetime.now(timezone.utc),        nullable=False    )    updated_at: Mapped[datetime] = mapped_column(        DateTime(timezone=True),        default=lambda: datetime.now(timezone.utc),        onupdate=lambda: datetime.now(timezone.utc),        nullable=False    )    # COPPA compliance    age_verified: Mapped[bool] = mapped_column(Boolean, default=False, nullable=False)    consent_given_at: Mapped[Optional[datetime]] = mapped_column(DateTime(timezone=True))    # Preferences    notification_preferences: Mapped[dict] = mapped_column(JSONB, default=dict)    parental_guidelines: Mapped[Optional[str]] = mapped_column(String(1000))    # Relationships    children: Mapped[List["ChildModel"]] = relationship(        "ChildModel",        back_populates="parent",        cascade="all, delete-orphan"    )    consents: Mapped[List["ConsentModel"]] = relationship(        "ConsentModel",        back_populates="parent",        cascade="all, delete-orphan"    )    safety_events: Mapped[List["SafetyEventModel"]] = relationship(        "SafetyEventModel",        back_populates="parent",        cascade="all, delete-orphan"    )    # Indexes and constraints    __table_args__ = (        Index("idx_parent_email_active", "email", "is_active"),        Index("idx_parent_created_at", "created_at"),        CheckConstraint("failed_login_attempts >= 0", name="chk_failed_attempts"),        CheckConstraint("char_length(email) >= 5", name="chk_email_min_length"),    )    def to_dict(self) -> Dict[str, Any]:        """Convert model to dictionary for API responses (excluding sensitive data)."""        return {            "id": self.id,            "email": self.email,            "name": self.name,            "is_active": self.is_active,            "is_verified": self.is_verified,            "created_at": self.created_at.isoformat(),            "last_login": self.last_login.isoformat() if self.last_login else None,            "age_verified": self.age_verified,        }