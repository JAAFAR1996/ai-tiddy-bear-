"""Child RepositoryHandles all child-related database operations with COPPA compliance."""from datetime import datetimefrom typing import Optional, Dict, Any, Listfrom uuid import uuid4from sqlalchemy import updatefrom sqlalchemy.ext.asyncio import AsyncSessionfrom sqlalchemy.future import selectfrom src.infrastructure.persistence.models.child_model import ChildModelfrom src.infrastructure.persistence.database import Databasefrom src.infrastructure.security.database_input_validator import (    database_input_validation,    validate_database_operation,    create_safe_database_session,    SecurityError)from src.infrastructure.security.coppa import get_consent_managerfrom src.infrastructure.logging_config import get_loggerlogger = get_logger(__name__, component="persistence")class ChildRepository:    """Repository for child-related database operations."""    def __init__(self, database: Database) -> None:        """Initialize child repository.        Args:            database: Database instance        """        self.database = database        self.consent_manager = get_consent_manager()        logger.info("ChildRepository initialized with COPPA compliance")    @database_input_validation("children")    async def create_child(self, parent_id: str, child_data: Dict[str, Any]) -> str:        """Create a new child profile with COPPA compliance.        Args:            parent_id: Parent user ID            child_data: Child profile data        Returns:            Child ID        Raises:            ValueError: If data is invalid or parent lacks consent        """        try:            # Verify parental consent            if not self.consent_manager.has_consent(parent_id):                raise ValueError("Parent has not provided COPPA consent")            # Validate child data            validated_operation = validate_database_operation("INSERT", "children", child_data)            validated_data = validated_operation["data"]            child_id = str(uuid4())            async with self.database.get_session() as session:                new_child = ChildModel(                    id=child_id,                    parent_id=parent_id,                    name=validated_data.get("name"),                    age=validated_data.get("age"),                    preferences=validated_data.get("preferences", {}),                    created_at=datetime.utcnow()                )                session.add(new_child)                await session.commit()                logger.info(f"Created child profile {child_id} for parent {parent_id}")                return child_id        except SecurityError as e:            logger.error(f"Security violation creating child: {e}")            raise ValueError(f"Invalid child data: {e}")        except Exception as e:            logger.error(f"Failed to create child profile: {e}")            raise RuntimeError(f"Database error: {e}") from e    @database_input_validation("children")    async def get_child(self, child_id: str) -> Optional[Dict[str, Any]]:        """Get child profile by ID.        Args:            child_id: Child ID        Returns:            Child data or None        """        try:            async with self.database.get_session() as session:                result = await session.execute(                    select(ChildModel).where(ChildModel.id == child_id)                )                child = result.scalar_one_or_none()                if child:                    return {                        "id": child.id,                        "parent_id": child.parent_id,                        "name": child.name,                        "age": child.age,                        "preferences": child.preferences,                        "created_at": child.created_at.isoformat()                    }                return None        except Exception as e:            logger.error(f"Failed to get child {child_id}: {e}")            raise RuntimeError(f"Database error: {e}") from e    from src.domain.entities.child_profile import ChildProfilefrom sqlalchemy.orm import selectinload    @database_input_validation("children")    async def get_children_by_parent(self, parent_id: str) -> List[ChildProfile]:        """Get all children for a parent."""        try:            async with self.database.get_session() as session:                result = await session.execute(                    select(ChildModel)                    .where(ChildModel.parent_id == parent_id)                    .options(selectinload(ChildModel.conversations))                )                children = result.scalars().all()                return [child.to_entity() for child in children]        except Exception as e:            logger.error(f"Failed to get children for parent {parent_id}: {e}")            raise RuntimeError(f"Database error: {e}") from e    @database_input_validation("children")    async def update_child(self, child_id: str, updates: Dict[str, Any]) -> bool:        """Update child profile.        Args:            child_id: Child ID            updates: Fields to update        Returns:            Success status        """        try:            # Don't allow updating parent_id or id            updates.pop("id", None)            updates.pop("parent_id", None)            validated_operation = validate_database_operation("UPDATE", "children", updates)            validated_data = validated_operation["data"]            async with self.database.get_session() as session:                stmt = (                    update(ChildModel)                    .where(ChildModel.id == child_id)                    .values(**validated_data)                )                result = await session.execute(stmt)                await session.commit()                if result.rowcount > 0:                    logger.info(f"Updated child {child_id}")                    return True                return False        except SecurityError as e:            logger.error(f"Security violation updating child: {e}")            raise ValueError(f"Invalid update data: {e}")        except Exception as e:            logger.error(f"Failed to update child {child_id}: {e}")            raise RuntimeError(f"Database error: {e}") from e