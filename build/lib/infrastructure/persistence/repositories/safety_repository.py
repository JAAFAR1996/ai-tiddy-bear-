"""Safety RepositoryHandles all safety-related database operations including events, alerts, and scores."""from datetime import datetime, timedeltafrom typing import Dict, Any, Listfrom uuid import uuid4from sqlalchemy import update, and_from sqlalchemy.ext.asyncio import AsyncSessionfrom sqlalchemy.future import selectfrom src.infrastructure.persistence.database import Databasefrom src.infrastructure.security.database_input_validator import (    database_input_validation,    validate_database_operation,    SecurityError,)from src.infrastructure.logging_config import get_loggerlogger = get_logger(__name__, component="persistence")class SafetyRepository:    """Repository for safety-related database operations."""    def __init__(self, database: Database) -> None:        """Initialize safety repository.        Args:            database: Database instance        """        self.database = database        logger.info("SafetyRepository initialized")    @database_input_validation("safety_events")    async def record_safety_event(        self, child_id: str, event_type: str, details: str, severity: str = "low"    ) -> str:        """Record a safety event in the database.        Args:            child_id: Child ID            event_type: Type of safety event            details: Event details            severity: Event severity (low, medium, high)        Returns:            Event ID        """        try:            event_data = {                "child_id": child_id,                "event_type": event_type,                "details": details,                "severity": severity,            }            validated_operation = validate_database_operation(                "INSERT", "safety_events", event_data            )            validated_data = validated_operation["data"]            event_id = str(uuid4())            # In production, this would insert into safety_events table            logger.warning(                f"Safety Event {event_id}: Child={child_id}, "                f"Type={event_type}, Severity={severity}, Details={details}"            )            return event_id        except SecurityError as e:            logger.error(f"Security violation recording safety event: {e}")            raise ValueError(f"Invalid event data: {e}")        except Exception as e:            logger.error(f"Failed to record safety event: {e}")            raise RuntimeError(f"Database error: {e}") from e    @database_input_validation("safety_scores")    async def update_safety_score(        self, child_id: str, new_score: float, reason: str    ) -> bool:        """Update the safety score for a child.        Args:            child_id: Child ID            new_score: New safety score (0.0 to 1.0)            reason: Reason for score update        Returns:            Success status        """        try:            if not 0.0 <= new_score <= 1.0:                raise ValueError(                    f"Safety score must be between 0.0 and 1.0, got {new_score}"                )            score_data = {                "child_id": child_id,                "safety_score": new_score,                "reason": reason,                "updated_at": datetime.utcnow(),            }            validated_operation = validate_database_operation(                "UPDATE", "safety_scores", score_data            )            # In production, this would update safety_scores table            logger.info(                f"Updated safety score for child {child_id}: {new_score} (Reason: {reason})"            )            return True        except ValueError as e:            logger.error(f"Validation error updating safety score: {e}")            raise        except SecurityError as e:            logger.error(f"Security violation updating safety score: {e}")            raise ValueError(f"Invalid score data: {e}")        except Exception as e:            logger.error(f"Failed to update safety score for child {child_id}: {e}")            raise RuntimeError(f"Database error: {e}") from e    @database_input_validation("safety_events")    async def get_safety_events(        self, child_id: str, limit: int = 50    ) -> List[Dict[str, Any]]:        """Retrieve safety events for a child.        Args:            child_id: Child ID            limit: Maximum number of events to return        Returns:            List of safety events        """        try:            if limit <= 0 or limit > 1000:                raise ValueError(f"Limit must be between 1 and 1000, got {limit}")            # In production, this would query safety_events table            # For now, return mock data            events = []            event_types = [                "content_filter",                "time_limit_exceeded",                "unsafe_interaction",            ]            severities = ["low", "medium", "high"]            for i in range(min(3, limit)):                events.append(                    {                        "event_id": str(uuid4()),                        "child_id": child_id,                        "event_type": event_types[i % len(event_types)],                        "details": f"Safety event {i+1} details",                        "severity": severities[i % len(severities)],                        "timestamp": datetime.utcnow().isoformat(),                    }                )            return events        except ValueError as e:            logger.error(f"Validation error getting safety events: {e}")            raise        except Exception as e:            logger.error(f"Failed to retrieve safety events for child {child_id}: {e}")            raise RuntimeError(f"Database error: {e}") from e    @database_input_validation("safety_alerts")    async def send_safety_alert(self, alert_data: Dict[str, Any]) -> str:        """Send a safety alert to parents.        Args:            alert_data: Alert information including child_id, alert_type, severity, message        Returns:            Alert ID        """        try:            required_fields = ["child_id", "alert_type", "severity", "message"]            for field in required_fields:                if field not in alert_data:                    raise ValueError(f"Missing required field: {field}")            validated_operation = validate_database_operation(                "INSERT", "safety_alerts", alert_data            )            validated_data = validated_operation["data"]            alert_id = str(uuid4())            alert_record = {                "alert_id": alert_id,                "child_id": validated_data["child_id"],                "alert_type": validated_data["alert_type"],                "severity": validated_data["severity"],                "message": validated_data["message"],                "timestamp": datetime.utcnow().isoformat(),                "sent": True,            }            # In production: insert into safety_alerts table and trigger notification service            logger.warning(f"Safety Alert: {alert_record}")            logger.info(                f"Safety alert {alert_id} sent for child {validated_data['child_id']}"            )            return alert_id        except ValueError as e:            logger.error(f"Validation error sending safety alert: {e}")            raise        except SecurityError as e:            logger.error(f"Security violation sending safety alert: {e}")            raise ValueError(f"Invalid alert data: {e}")        except Exception as e:            logger.error(f"Failed to send safety alert: {e}")            raise RuntimeError(f"Database error: {e}") from e