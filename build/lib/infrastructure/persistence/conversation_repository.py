class AsyncSQLAlchemyConversationRepo(ConversationRepository):from typing import List, Optionalfrom uuid import UUIDfrom sqlalchemy.ext.asyncio import AsyncSessionfrom sqlalchemy.future import selectfrom src.domain.entities.conversation import Conversationfrom src.domain.repositories.conversation_repository import ConversationRepositoryfrom src.infrastructure.persistence.models.conversation_model import ConversationModelclass AsyncSQLAlchemyConversationRepo(ConversationRepository):    def __init__(self, session: AsyncSession) -> None:        self.session = session    async def save(self, conversation: Conversation) -> None:        model = ConversationModel.from_entity(conversation)        self.session.add(model)        await self.session.commit()    async def get_by_id(self, conversation_id: UUID) -> Optional[Conversation]:        result = await self.session.execute(            select(ConversationModel).where(ConversationModel.id == conversation_id)        )        conversation_model = result.scalars().first()        return conversation_model.to_entity() if conversation_model else None    from sqlalchemy.orm import selectinload    async def find_by_child_id(self, child_id: UUID, limit: int = 100, offset: int = 0) -> List[Conversation]:        # Prevent excessive memory usage and DoS attacks        if limit > 1000:            limit = 1000        result = await self.session.execute(            select(ConversationModel)            .where(ConversationModel.child_id == child_id)            .options(selectinload(ConversationModel.messages))            .limit(limit)            .offset(offset)            .order_by(ConversationModel.created_at.desc())        )        return [model.to_entity() for model in result.scalars().all()]    async def delete(self, conversation_id: UUID) -> None:        result = await self.session.execute(            select(ConversationModel).where(ConversationModel.id == conversation_id)        )        conversation_model = result.scalars().first()        if conversation_model:            self.session.delete(conversation_model)            await self.session.commit()