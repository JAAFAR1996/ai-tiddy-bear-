"""from typing import Dict, Any, Optionalimport loggingfrom .components import ("""Comprehensive Monitoring and Alerting System - RefactoredEnterprise-grade monitoring for AI Teddy Bear backend with child safety focus.This file provides the main interface while delegating to modular components."""    AlertSeverity,    MetricType,    AlertStatus,    MetricValue,    Alert,    ChildSafetyMonitor,    ComprehensiveMonitoringService)from src.infrastructure.logging_config import get_loggerlogger = get_logger(__name__, component="monitoring")# Global monitoring service instance_monitoring_service: Optional[ComprehensiveMonitoringService] = Nonedef get_monitoring_service() -> ComprehensiveMonitoringService:    """Get or create the global monitoring service instance."""    global _monitoring_service    if _monitoring_service is None:        _monitoring_service = ComprehensiveMonitoringService()    return _monitoring_servicedef record_metric(name: str, value: float, metric_type: MetricType = MetricType.GAUGE,                 tags: Optional[Dict[str, str]] = None) -> None:    """Record a metric value using the global monitoring service."""    service = get_monitoring_service()    service.record_metric(name, value, metric_type, tags)def record_request_time(endpoint: str, duration: float, status_code: int) -> None:    """Record API request performance using the global monitoring service."""    service = get_monitoring_service()    service.record_request_time(endpoint, duration, status_code)def record_security_event(event_type: str, details: Dict[str, Any], severity: str = "medium") -> None:    """Record security-related events using the global monitoring service."""    service = get_monitoring_service()    service.record_security_event(event_type, details, severity)def record_child_safety_event(child_id: str, event_type: str, severity: str, details: Dict[str, Any]) -> None:    """Record child safety events using the global monitoring service."""    service = get_monitoring_service()    service.record_child_safety_event(child_id, event_type, severity, details)def get_metrics_summary() -> Dict[str, Any]:    """Get a summary of current metrics."""    service = get_monitoring_service()    return service.get_metrics_summary()def get_child_safety_status(child_id: str) -> Dict[str, Any]:    """Get safety status for a specific child."""    service = get_monitoring_service()    return service.child_safety_monitor.get_child_safety_status(child_id)# Re-export types for backward compatibility__all__ = [    'AlertSeverity',    'MetricType',    'AlertStatus',    'MetricValue',    'Alert',    'ChildSafetyMonitor',    'ComprehensiveMonitoringService',    'get_monitoring_service',    'record_metric',    'record_request_time',    'record_security_event',    'record_child_safety_event',    'get_metrics_summary',    'get_child_safety_status']