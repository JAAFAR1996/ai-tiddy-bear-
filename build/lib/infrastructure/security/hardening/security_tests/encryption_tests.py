"""from typing import Dict, List, Anyimport loggingimport refrom .base_tester import BaseSecurityTester"""Encryption Security Tests"""from src.infrastructure.logging_config import get_loggerlogger = get_logger(__name__, component="security")class EncryptionTester(BaseSecurityTester):    """Tests for encryption security"""    def test_encryption(self) -> Dict[str, Any]:        """Test encryption implementation"""        issues = []        encryption_patterns = [            (r'md5\s*\(', "MD5 hash usage (weak)"),            (r'sha1\s*\(', "SHA1 hash usage (weak)"),            (r'DES\s*\(', "DES encryption (weak)"),            (r'RC4\s*\(', "RC4 encryption (weak)"),            (r'algorithm\s*=\s*"md5"', "MD5 algorithm specified"),            (r'algorithm\s*=\s*"sha1"', "SHA1 algorithm specified"),            (r'ssl_version\s*=\s*ssl\.PROTOCOL_TLSv1', "TLS 1.0 usage (weak)"),            (r'ssl_version\s*=\s*ssl\.PROTOCOL_SSLv', "SSL usage (weak)")        ]        strong_encryption_indicators = [            "AES",            "sha256",            "sha512",            "RSA",            "ECDSA",            "bcrypt",            "scrypt",            "pbkdf2",            "TLSv1_2",            "TLSv1_3"        ]        python_files = self.scan_python_files()        has_strong_encryption = False        for file_path in python_files:            content = self.read_file_safely(file_path)            if not content:                continue            # Check for weak encryption            for pattern, description in encryption_patterns:                if re.search(pattern, content, re.IGNORECASE):                    issues.append({                        "file": str(file_path),                        "issue": description,                        "severity": "high"                    })            # Check for strong encryption            for indicator in strong_encryption_indicators:                if indicator in content:                    has_strong_encryption = True        if not has_strong_encryption:            issues.append("No strong encryption implementation found")        recommendations = [            "Use AES-256 for symmetric encryption",            "Use RSA-2048 or higher for asymmetric encryption",            "Use SHA-256 or higher for hashing",            "Implement proper key management",            "Use bcrypt for password hashing",            "Use TLS 1.2+ for network communication"        ]        return self.create_test_result(            passed=len(issues) == 0 and has_strong_encryption,            issues=[f"{issue['file']}: {issue['issue']}" for issue in issues] if isinstance(issues, list) and all(isinstance(i, dict) for i in issues) else issues,            recommendations=recommendations        )    def test_secrets_exposure(self) -> Dict[str, Any]:        """Test for exposed secrets"""        issues = []        secret_patterns = [            (r'api_key\s*=\s*"[^"]{10,}"', "API key in code"),            (r'secret_key\s*=\s*"[^"]{10,}"', "Secret key in code"),            (r'password\s*=\s*"[^"]{5,}"', "Password in code"),            (r'token\s*=\s*"[^"]{10,}"', "Token in code"),            (r'sk-[a-zA-Z0-9]{32,}', "OpenAI API key pattern"),            (r'xoxb-[a-zA-Z0-9-]{50,}', "Slack token pattern"),            (r'ghp_[a-zA-Z0-9]{36}', "GitHub personal access token"),            (r'AIza[a-zA-Z0-9_-]{35}', "Google API key pattern")        ]        # Check all text files        file_patterns = ["*.py", "*.yml", "*.yaml", "*.json", "*.txt", "*.md"]        all_files = []        for pattern in file_patterns:            all_files.extend(self.base_path.rglob(pattern))        for file_path in all_files:            # Skip certain files            if any(skip in str(file_path) for skip in ['.git', '__pycache__', '.venv', 'node_modules']):                continue            content = self.read_file_safely(file_path)            if not content:                continue            for pattern, description in secret_patterns:                matches = re.findall(pattern, content, re.IGNORECASE)                if matches:                    issues.append({                        "file": str(file_path),                        "issue": f"{description} - {len(matches)} found",                        "severity": "critical"                    })        recommendations = [            "Move all secrets to environment variables",            "Use a secrets management service",            "Add .env files to .gitignore",            "Use git-secrets or similar tools",            "Implement secret scanning in CI/CD",            "Rotate any exposed secrets immediately"        ]        return self.create_test_result(            passed=len(issues) == 0,            issues=[f"{issue['file']}: {issue['issue']}" for issue in issues],            recommendations=recommendations        )