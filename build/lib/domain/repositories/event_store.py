class EventStore(ABC):from abc import ABC, abstractmethodfrom typing import Dict, List, Anyfrom uuid import UUIDclass EventStore(ABC):    @abstractmethod    async def save_events(self, aggregate_id: UUID, events: List[Any]) -> None:        pass    @abstractmethod    async def load_events(self, aggregate_id: UUID) -> List[Any]:        passclass InMemoryEventStore(EventStore):    def __init__(self) -> None:        self.events: Dict[UUID, List[Any]] = {}    async def save_events(self, aggregate_id: UUID, events: List[Any]) -> None:        if aggregate_id not in self.events:            self.events[aggregate_id] = []        self.events[aggregate_id].extend(events)    async def load_events(self, aggregate_id: UUID) -> List[Any]:        return self.events.get(aggregate_id, [])