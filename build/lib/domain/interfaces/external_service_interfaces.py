"""from abc import ABC, abstractmethodfrom typing import Any, Dict, List, Optionalfrom uuid import UUID"""External service interfaces for the domain layer.These interfaces define contracts for external services withoutcreating dependencies on specific implementations."""class IAIService(ABC):    """Interface for AI service operations."""    @abstractmethod    async def generate_response(        self,        child_id: UUID,        conversation_history: List[str],        current_input: str,        preferences: Dict[str, Any]    ) -> Dict[str, Any]:        """Generate an AI response for a child."""        pass    @abstractmethod    async def validate_content_safety(self, content: str) -> Dict[str, Any]:        """Validate content for child safety."""        passclass INotificationService(ABC):    """Interface for notification operations."""    @abstractmethod    async def send_parent_notification(        self,        parent_id: UUID,        message: str,        notification_type: str,        metadata: Optional[Dict[str, Any]] = None    ) -> bool:        """Send a notification to a parent."""        pass    @abstractmethod    async def send_safety_alert(        self,        parent_id: UUID,        child_id: UUID,        alert_details: Dict[str, Any]    ) -> bool:        """Send a safety alert notification."""        pass