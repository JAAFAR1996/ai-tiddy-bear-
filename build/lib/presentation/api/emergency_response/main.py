"""from datetime import datetimeimport asyncioimport loggingimport osfrom contextlib import asynccontextmanagerfrom fastapi import FastAPIfrom fastapi.middleware.cors import CORSMiddlewarefrom sqlalchemy.ext.asyncio import AsyncSession, create_async_enginefrom sqlalchemy.orm import sessionmakerimport redis.asyncio as redisfrom .endpoints import EmergencyEndpointsfrom .services import EmergencyResponseService, NotificationService, SystemMonitorService"""Emergency Response Main Module - Simplified main application"""logging.basicConfig(    level=logging.INFO,    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")from src.infrastructure.logging_config import get_loggerlogger = get_logger(__name__, component="api")# متغيرات البيئة - محسّنة للإنتاجREDIS_URL = os.getenv("REDIS_URL", "redis://redis:6379")# إعداد قاعدة البيانات الآمنة - PostgreSQL فقط للإنتاجDATABASE_URL = os.getenv("DATABASE_URL")if not DATABASE_URL:    logger.critical("DATABASE_URL environment variable is required for emergency response")    raise RuntimeError("CRITICAL: DATABASE_URL must be set for emergency response system")# منع استخدام SQLite في نظام الطوارئ الحرجif DATABASE_URL.startswith("sqlite"):    logger.critical("SQLite detected in emergency response system - SECURITY VIOLATION")    raise RuntimeError(        "CRITICAL: SQLite is not allowed for emergency response systems. "        "Use PostgreSQL for data integrity and COPPA compliance."    )# متغيرات عامةredis_client = Nonedb_session = Noneemergency_service = Nonemonitor_service = Nonenotification_service = Noneendpoints = None@asynccontextmanagerasync def lifespan(app: FastAPI):    """إدارة دورة حياة التطبيق"""    global redis_client, db_session, emergency_service, monitor_service, notification_service, endpoints    logger.info("🚨 Starting Emergency Response System...")    try:        # إعداد Redis        redis_client = redis.from_url(REDIS_URL)        await redis_client.ping()        logger.info("✅ Redis connected")        # إعداد قاعدة البيانات        engine = create_async_engine(DATABASE_URL)        async_session = sessionmaker(engine, class_=AsyncSession)        db_session = async_session()        logger.info("✅ Database connected")        # إعداد الخدمات        emergency_service = EmergencyResponseService(redis_client, db_session)        monitor_service = SystemMonitorService(redis_client)        notification_service = NotificationService(redis_client)        # إعداد النقاط النهائية        endpoints = EmergencyEndpoints(emergency_service, monitor_service, notification_service)        logger.info("🚨 Emergency Response System started successfully")    except Exception as e:        logger.error(f"Failed to start Emergency Response System: {e}")        raise    yield    # تنظيف الموارد    logger.info("🚨 Shutting down Emergency Response System...")    if redis_client:        await redis_client.close()    if db_session:        await db_session.close()    logger.info("🚨 Emergency Response System shutdown complete")def create_app() -> FastAPI:    """إنشاء تطبيق FastAPI"""    app = FastAPI(        title="🚨 AI Teddy Bear - Emergency Response",        description="نظام الاستجابة الطارئة للتنبيهات الأمنية",        version="1.0.0",        lifespan=lifespan    )    # إعداد CORS آمن    allowed_origins = [        "http://localhost:3000",        "http://localhost:3001",        "https://yourdomain.com"  # إضافة نطاقات الإنتاج    ]    app.add_middleware(        CORSMiddleware,        allow_origins=allowed_origins,        allow_credentials=True,        allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"],        allow_headers=["Authorization", "Content-Type", "X-Requested-With"],    )    # تسجيل المسارات    @app.post("/webhook/alerts")    async def webhook_alerts(request, payload, background_tasks):        return await endpoints.webhook_alerts(request, payload, background_tasks)    @app.get("/health")    async def health_check():        return await endpoints.health_check()    @app.get("/alerts")    async def get_alerts(credentials):        return await endpoints.get_alerts(credentials)    @app.post("/notifications")    async def send_notification(request, credentials):        return await endpoints.send_notification(request, credentials)    @app.get("/system/status")    async def system_status(credentials):        return await endpoints.system_status(credentials)    return app# نقطة الدخولif __name__ == "__main__":    import uvicorn    API_PORT = int(os.getenv("API_PORT", 8080))    API_HOST = os.getenv("API_HOST", "0.0.0.0")    app = create_app()    uvicorn.run(app, host=API_HOST, port=API_PORT, reload=False)