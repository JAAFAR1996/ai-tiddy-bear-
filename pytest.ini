# Pytest configuration for AI Teddy Bear Project (2025 Standards)

[pytest]
# Test discovery
testpaths = tests
python_files = test_*.py *_test.py # Refined to explicitly discover test files, preventing false positives.
python_classes = Test* *Tests
python_functions = test_* check_*

# Minimum pytest version for modern features
minversion = 8.0

# Test execution with comprehensive options
addopts =
    -v
    --strict-markers
    --strict-config
    --tb=short
    --cov=src
    --cov-report=term-missing:skip-covered
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    --cov-report=json:coverage.json
    --cov-fail-under=80
    --cov-branch
    --maxfail=3 # Set a default value for maxfail
    --asyncio-mode=auto
    --show-capture=no
    --durations=10
    --durations-min=0.1
    --capture=no

# Enhanced markers for comprehensive testing
markers =
    service_ai: marks tests related to AI service functionality.
    data_persistence: marks tests interacting with the database.
    child_safety: marks tests related to child safety features.
    authentication: marks tests related to user authentication.
    parental_control: marks tests related to parental control features.
    api_endpoint: marks tests for API endpoints.
    security: marks tests for security vulnerabilities.
    performance: marks tests for performance and load.
    e2e: marks end-to-end tests.
    integration: marks integration tests.
    unit: marks unit tests.
    external_api: marks tests interacting with external APIs.
    caching: marks tests related to caching mechanisms.
    messaging: marks tests related to messaging queues.
    monitoring: marks tests related to monitoring and logging.
    data_validation: marks tests for data input validation.
    error_handling: marks tests for error handling and exceptions.
    concurrency: marks tests related to concurrent operations.
    accessibility: marks tests related to accessibility features.
    localization: marks tests related to language and localization.
    data_export: marks tests related to data export features.
    firmware_update: marks tests related to OTA firmware updates.
    device_management: marks tests for device management features.
    realtime_communication: marks tests for WebSocket/gRPC real-time communication.
    compliance: marks tests for regulatory compliance (e.g., COPPA).
    analytics: marks tests related to data analytics and reporting.
    configuration: marks tests for configuration management.
    resource_management: marks tests for resource allocation and cleanup.
    system_health: marks tests for overall system health.
    data_transformation: marks tests for data transformation pipelines.
    ml_model: marks tests for machine learning model inference.
    alerting: marks tests for monitoring and alerting systems.
    user_management: marks tests for user creation and management.
    profile_management: marks tests for child/parent profile management.
    udid_generation: marks tests for unique device ID generation.
    voice_processing: marks tests for voice capture and processing.
    story_generation: marks tests for dynamic story generation.
    game_logic: marks tests for voice game logic.
    consent_management: marks tests for parental consent flows.

# ✅ Coverage configuration محسن للحصول على تقارير دقيقة
[coverage:run]
source = src
branch = true
parallel = true
concurrency = multiprocessing,thread

# Files to exclude from coverage - minimal exclusions for security
omit = 
    */tests/*
    */test_*
    */*_test.py
    */conftest.py

# Include specific patterns  
include = 
    src/*
    src/domain/*
    src/application/*
    src/infrastructure/*
    src/presentation/*

[coverage:report]
precision = 2
show_missing = true
skip_covered = false
sort = Cover
fail_under = 80

# Enhanced exclude patterns for better accuracy
exclude_lines =
    # Lines that should not be included in coverage report
    # These are usually logging, debug, or conditional statements that are hard to test
    pragma: no cover
    if TYPE_CHECKING:
    if __name__ == "__main__":
    raise NotImplementedError
    # logger.debug # Review critical code paths to ensure important logging is not excluded.
    # logger.info.* # Review critical code paths to ensure important logging is not excluded.

[coverage:html]
directory = htmlcov
title = AI Teddy Bear - Test Coverage Report
show_contexts = true

[coverage:xml]
output = coverage.xml

[coverage:json]
output = coverage.json
show_contexts = true