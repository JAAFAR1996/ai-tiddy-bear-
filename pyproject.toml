[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ai-teddy-bear"
version = "2.0.0"
description = "ðŸ§¸ AI Teddy Bear - Production System with Enterprise Security"
authors = [
    {name = "AI Teddy Bear Team", email = "team@teddy-ai.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Multimedia :: Sound/Audio",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

# Core production dependencies only
dependencies = [
    "fastapi==0.115.5",
    "uvicorn[standard]==0.27.0",
    "pydantic==2.10.2",
    "pydantic-settings==2.1.0",
    "sqlalchemy[asyncio]==2.0.25",
    "asyncpg==0.29.0",
    "alembic==1.13.1",
    "redis==5.0.1",
    "hiredis==2.3.2",
    "openai==1.55.0",
    "python-jose[cryptography]==3.3.0",
    "passlib[bcrypt]==1.7.4",
    "cryptography==43.0.1",
    "python-multipart==0.0.20",
    "httpx==0.26.0",
    "dependency-injector==4.41.0",
    "prometheus-client==0.19.0",
    "sentry-sdk[fastapi]==1.39.1",
    "email-validator==2.1.0",
    "python-dotenv==1.0.0",
]

[project.optional-dependencies]
# Development dependencies
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.11.0",
    "pytest-xdist>=3.5.0",
    "pytest-html>=4.1.0",
    "httpx>=0.26.0",
    "factory-boy>=3.3.0",
    "faker>=20.1.0",
    "freezegun>=1.2.2",
    "ipython>=8.17.2",
    "jupyter>=1.0.0",
    "rich>=13.7.0",
]

# Code quality tools
lint = [
    "ruff>=0.4.0",
    "mypy>=1.9.0",
    "black>=24.3.0",
    "isort>=5.13.0",
    "bandit[toml]>=1.7.5",
    "safety>=2.3.0",
    "pre-commit>=3.4.0",
]

# Production extras (optional production enhancements)
prod-extra = [
    "aiokafka==0.10.0",
    "msgpack==1.0.7",
    "slowapi==0.1.9",
    "orjson==3.9.10",
    "uvloop==0.19.0",
    "httptools==0.6.1",
]

# Documentation
docs = [
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.4.14",
    "mkdocs-mermaid2-plugin>=1.1.1",
]

[project.urls]
"Homepage" = "https://github.com/ai-teddy-bear/production"
"Bug Reports" = "https://github.com/ai-teddy-bear/production/issues"
"Source" = "https://github.com/ai-teddy-bear/production"

# ================== TOOL CONFIGURATIONS ==================

[tool.black]
line-length = 88
target-version = ["py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
  \.eggs
  | \.git
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | _build
  | build
  | dist
  | migrations
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
known_first_party = ["src", "teddy_bear"]
known_third_party = ["fastapi", "pydantic", "sqlalchemy", "redis", "openai"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "--strict-markers",
    "--strict-config", 
    "--cov=src",
    "--cov-report=html",
    "--cov-report=term-missing",
    "--cov-fail-under=80",
    "--tb=short",
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow",
    "integration: marks tests as integration tests", 
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
    "security: marks tests as security tests",
]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*", 
    "*/migrations/*",
    "*/venv/*",
    "*/env/*",
    "*/.venv/*",
    "setup.py",
    "*/conftest.py",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.mypy]
python_version = "3.12"
disallow_untyped_defs = true
strict = true
exclude = ["migrations/", "tests/"]

[[tool.mypy.overrides]]
module = [
    "pydantic_settings.*",
    "dependency_injector.*", 
    "slowapi.*",
    "openai.*",
    "fastapi_users.*",
]
ignore_missing_imports = true

[tool.bandit]
exclude_dirs = ["tests", "migrations", "venv", "env", ".venv"]
skips = ["B101"]

[tool.ruff]
target-version = "py312"
line-length = 88
exclude = ["migrations/"]

[tool.ruff.lint]
select = [
    "E", "W", "F", "I", "B", "C4", "UP", "S", "N", "D", "SIM", "ICN", "Q", "PL", "RUF"
]
ignore = ["E501", "D100", "D101", "D102", "D103", "D104", "D105", "D203", "D213"]

[tool.ruff.lint.per-file-ignores]
"test_*.py" = ["F401", "F811", "S101"]
"tests/*.py" = ["F401", "F811", "S101"] 
"__init__.py" = ["F401"]

[tool.setuptools]
packages = ["src"]



[tool.setuptools.package-data]
"*" = ["*.md", "*.txt", "*.json", "*.yaml", "*.yml"]

[tool.flake8]
max-line-length = 88
extend-ignore = "E203, W503"
exclude = ".git,__pycache__,docs,old,build,dist"