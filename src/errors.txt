  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\application\interfaces\infrastructure_services.py", line 155
    """Subscribe to domain events"""
                                 ^
SyntaxError: unterminated triple-quoted string literal (detected at line 156)

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\application\interfaces\text_to_speech_service.py", line 4
    ->,
    ^^
SyntaxError: invalid syntax

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\application\services\ai\models.py", line 10
    """AI response model with safety validation"""
                                               ^
SyntaxError: unterminated triple-quoted string literal (detected at line 18)

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\application\services\ai\utils.py", line 100
    """Check if content is appropriate for child's age"""
                                                ^
SyntaxError: unterminated string literal (detected at line 100)

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\application\services\consent\consent_models.py", line 46
    """Verification attempt tracking."""
                                     ^
SyntaxError: unterminated triple-quoted string literal (detected at line 54)

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\application\services\consent\consent_service.py", line 159
    email: Parent's email address
                 ^
SyntaxError: unterminated string literal (detected at line 159)

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\application\services\consent\verification_service.py", line 31
    email: Parent's email address
                 ^
SyntaxError: unterminated string literal (detected at line 31)

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\application\services\consent\__init__.py", line 14
    """
    ^
SyntaxError: unterminated triple-quoted string literal (detected at line 23)

Sorry: IndentationError: unexpected indent (__init__.py, line 7)
Sorry: IndentationError: unexpected indent (relationship_manager.py, line 10)
Sorry: IndentationError: unexpected indent (__init__.py, line 8)
Sorry: IndentationError: expected an indented block after 'if' statement on line 60 (schemas.py, line 61)
  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\domain\entities\conversation.py", line 8
    Defines the Conversation entity, representing an interaction between a child and the AI.
            ^^^
SyntaxError: invalid syntax

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\domain\services\age_filter.py", line 7
    ->,
    ^^
SyntaxError: invalid syntax

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\infrastructure\exceptions.py", line 7
    """Centralized Exception Handling System"""
       ^^^^^^^^^^^
SyntaxError: invalid syntax

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\infrastructure\adapters\encryption_adapter.py", line 62
    """Get or create global encryption adapter instance."""
                                                        ^
SyntaxError: unterminated triple-quoted string literal (detected at line 66)

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\infrastructure\ai\chatgpt\client.py", line 100
    """Create child - safe system prompt with age - appropriate guidelines."""
                                                                           ^
SyntaxError: unterminated triple-quoted string literal (detected at line 152)

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\infrastructure\ai\chatgpt\fallback_responses.py", line 186
    """الحصول على بداية محادثة"""
                              ^
SyntaxError: unterminated triple-quoted string literal (detected at line 195)

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\infrastructure\ai\chatgpt\response_enhancer.py", line 211
    """اكتشاف المشاعر في الاستجابة"""
                                  ^
SyntaxError: unterminated triple-quoted string literal (detected at line 223)

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\infrastructure\ai\chatgpt\safety_filter.py", line 167
    """Get safe alternative topics for redirection."""
                                                   ^
SyntaxError: unterminated triple-quoted string literal (detected at line 181)

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\infrastructure\ai\chatgpt\__init__.py", line 9
    """
    ^
SyntaxError: unterminated triple-quoted string literal (detected at line 21)

Sorry: IndentationError: expected an indented block after class definition on line 79 (env_security.py, line 80)
  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\infrastructure\di\__init__.py", line 1
    __all__ = ["Container", "container"]from .container import Container, container__all__ = ["Container", "container"]
                                        ^^^^
SyntaxError: invalid syntax

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\infrastructure\error_handling\error_handlers.py", line 16
    """Base error handler with common functionality"""
       ^^^^
SyntaxError: invalid syntax

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\infrastructure\error_handling\exceptions.py", line 4
    """Standardized exception hierarchy for AI Teddy Bear backend.
       ^^^^^^^^^^^^
SyntaxError: invalid syntax

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\infrastructure\error_handling\handlers.py", line 8
    """Error handling utilities and standardized response formatting."""
       ^^^^^
SyntaxError: invalid syntax

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\infrastructure\exception_handling\__init__.py", line 6
    .enterprise_exception_handler,
    ^
SyntaxError: invalid syntax

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\infrastructure\external_apis\chatgpt_client.py", line 9
    """Production ChatGPT API Client with Child Safety Filtering
       ^^^^^^^^^^
SyntaxError: invalid syntax

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\infrastructure\messaging\kafka_event_bus.py", line 151
    return {"event_type": type(event).__name__}
                                               ^
SyntaxError: expected 'except' or 'finally' block

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\infrastructure\middleware\rate_limit_middleware.py", line 344
    """Factory function to create rate limiting middleware."""
                                                           ^
SyntaxError: unterminated triple-quoted string literal (detected at line 364)

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\infrastructure\middleware\request_signing.py", line 51
    exempt_paths: Paths that don't require signatures (e.g., health checks)
                                ^
SyntaxError: unterminated string literal (detected at line 51)

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\infrastructure\middleware\secure_cors.py", line 11
    CORS Middleware with Security Controls
         ^^^^^^^^^^
SyntaxError: invalid syntax

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\infrastructure\monitoring\comprehensive_monitoring.py", line 574
    """Decorator to monitor function performance."""
                                                 ^
SyntaxError: unterminated triple-quoted string literal (detected at line 593)

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\infrastructure\monitoring\__init__.py", line 16
    """
    ^
SyntaxError: unterminated triple-quoted string literal (detected at line 28)

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\infrastructure\monitoring\components\child_safety_monitor.py", line 126
    """Calculate a safety score based on recent events."""
                                                       ^
SyntaxError: unterminated triple-quoted string literal (detected at line 141)

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\infrastructure\monitoring\components\monitoring_service.py", line 303
    """Shutdown monitoring service."""
                                   ^
SyntaxError: unterminated triple-quoted string literal (detected at line 308)

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\infrastructure\monitoring\components\types.py", line 67
    """Initialize alert with defaults."""
                                      ^
SyntaxError: unterminated triple-quoted string literal (detected at line 69)

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\infrastructure\monitoring\components\__init__.py", line 8
    """
    ^
SyntaxError: unterminated triple-quoted string literal (detected at line 18)

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\infrastructure\persistence\conversation_sqlite_repository.py", line 59
    """Initialize database with proper schema."""
       ^^^^^^^^^^
SyntaxError: invalid syntax

Sorry: IndentationError: unexpected indent (models.py, line 4)
  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\infrastructure\persistence\models\__init__.py", line 7
    """
    ^
SyntaxError: unterminated triple-quoted string literal (detected at line 8)

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\infrastructure\security\comprehensive_audit_integration.py", line 54
    user_email: User's email (will be sanitized)
                    ^
SyntaxError: unterminated string literal (detected at line 54)

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\infrastructure\security\cors_service.py", line 466
    """
    ^
SyntaxError: unterminated triple-quoted string literal (detected at line 481)

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\infrastructure\security\enhanced_security.py", line 351
    """Factory function to create security middleware"""
                                                     ^
SyntaxError: unterminated triple-quoted string literal (detected at line 352)

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\infrastructure\security\environment_validator.py", line 187
    """Get validated configuration with defaults for development only"""
                                                                     ^
SyntaxError: unterminated triple-quoted string literal (detected at line 213)

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\infrastructure\security\error_handler.py", line 31
    Create a secure error response that doesn't leak sensitive information.
                                             ^
SyntaxError: unterminated string literal (detected at line 31)

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\infrastructure\security\fallback_rate_limiter.py", line 353
    """Reset rate limits for user across all systems."""
                                                     ^
SyntaxError: unterminated triple-quoted string literal (detected at line 369)

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\infrastructure\security\logging_security_monitor.py", line 33
    'password': r'password["\s]*[:=]["\s]*[^\s"']+',
                                                ^
SyntaxError: closing parenthesis ']' does not match opening parenthesis '{' on line 24

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\infrastructure\security\path_validator.py", line 1
    """from dataclasses import dataclassfrom pathlib import Pathfrom typing import Optional, List, Set, Unionimport loggingimport osimport re"""Path Validation Security ServiceThis module provides secure path validation to prevent directory traversal attacksand ensure all file operations are restricted to authorized directories."""from src.infrastructure.logging_config import get_loggerlogger = get_logger(__name__, component="security")@dataclassclass PathPolicy:    """Security policy for path operations"""    allowed_base_dirs: Set[str]    allowed_extensions: Set[str]    max_path_length: int = 255    allow_symlinks: bool = False    case_sensitive: bool = Trueclass PathValidator:    """    This service validates file paths and prevents directory traversal    vulnerabilities while maintaining child safety compliance.    """    # Dangerous path patterns that indicate traversal attempts    TRAVERSAL_PATTERNS = [        r'\\.\\./',      # Unix-style parent directory        r'\\.\\.\\',     # Windows-style parent directory        r'%2e%2e',     # URL-encoded ..        r'%2f',        # URL-encoded /        r'%5c',        # URL-encoded \\        r'\\.\\.%2f',    # Mixed encoding        r'\\.\\.%5c',    # Mixed encoding        r'%252e%252e', # Double URL-encoded ..        r'\x2e\x2e',   # Hex-encoded ..        r'\\.{2,}',     # Multiple dots    ]    def __init__(self, policy: PathPolicy) -> None:        self.policy = policy        self._compiled_patterns = [re.compile(pattern, re.IGNORECASE) for pattern in self.TRAVERSAL_PATTERNS]        # Normalize base directories for consistent checking        self.normalized_base_dirs = set()        for base_dir in policy.allowed_base_dirs:            normalized = os.path.realpath(os.path.abspath(base_dir))            self.normalized_base_dirs.add(normalized)            logger.debug(f"Added normalized base directory: {normalized}")    def validate_path(self, user_path: str, operation: str = "read") -> bool:        """        Validate a user - provided path for security        Args: user_path: The path provided by user / API            operation: Type of operation(read, write, execute)        Returns: bool: True if path is safe, False otherwise        """        try:            # Basic input validation            if not user_path or not isinstance(user_path, str):                logger.warning("Invalid path input: empty or non-string")                return False            # Check path length            if len(user_path) > self.policy.max_path_length:                logger.warning(f"Path too long: {len(user_path)} > {self.policy.max_path_length}")                return False            # Check for traversal patterns            if self._contains_traversal_patterns(user_path):                logger.warning(f"Path contains traversal patterns: {user_path}")                return False            # Check for null bytes (directory traversal via null byte injection)            if '\x00' in user_path:                logger.warning(f"Path contains null bytes: {user_path}")                return False            # Normalize and resolve the path            try:                normalized_path = os.path.realpath(os.path.abspath(user_path))            except (OSError, ValueError) as e:                logger.warning(f"Failed to normalize path {user_path}: {e}")                return False            # Check if path is within allowed base directories            if not self._is_within_allowed_dirs(normalized_path):                logger.warning(f"Path outside allowed directories: {normalized_path}")                return False            # Check file extension if specified            if self.policy.allowed_extensions:                file_ext = Path(user_path).suffix.lower()                if file_ext not in self.policy.allowed_extensions:                    logger.warning(f"File extension not allowed: {file_ext}")                    return False            # Check symlink policy            if not self.policy.allow_symlinks and os.path.islink(user_path):                logger.warning(f"Symlinks not allowed: {user_path}")                return False            return True        except Exception as e:            logger.error(f"Path validation error: {e}")            return False    def sanitize_path(self, user_path: str) -> Optional[str]:        """        Sanitize a user path by removing dangerous components        Args: user_path: User - provided path        Returns: Optional[str]: Sanitized path or None if cannot be made safe        """        if not user_path:            return None        try:            # Remove dangerous patterns            sanitized = user_path            for pattern in self.TRAVERSAL_PATTERNS:                sanitized = re.sub(pattern, '', sanitized, flags=re.IGNORECASE)            # Remove null bytes            sanitized = sanitized.replace('\x00', '')            # Normalize path separators            sanitized = sanitized.replace('\\', '/')            # Remove duplicate slashes            sanitized = re.sub(r'/+', '/', sanitized)            # Remove leading/trailing dots and slashes            sanitized = sanitized.strip('./')            if self.validate_path(sanitized):                return sanitized            return None        except Exception as e:            logger.error(f"Path sanitization error: {e}")            return None    def get_safe_path(self, user_path: str, base_dir: str = None) -> Optional[str]:        """        Get a safe absolute path within the specified base directory        Args: user_path: User - provided path            base_dir: Base directory to restrict to(must be in allowed dirs)        Returns: Optional[str]: Safe absolute path or None        """        try:            # Use first allowed base directory if none specified            if base_dir is None:                if not self.normalized_base_dirs:                    return None                base_dir = list(self.normalized_base_dirs)[0]            # Ensure base directory is allowed            normalized_base = os.path.realpath(os.path.abspath(base_dir))            if normalized_base not in self.normalized_base_dirs:                logger.warning(f"Base directory not allowed: {base_dir}")                return None            # Sanitize the user path            sanitized = self.sanitize_path(user_path)            if not sanitized:                return None            # Combine with base directory            safe_path = os.path.join(normalized_base, sanitized)            safe_path = os.path.realpath(safe_path)            # Final validation            if self.validate_path(safe_path):                return safe_path            return None        except Exception as e:            logger.error(f"Safe path generation error: {e}")            return None    def _contains_traversal_patterns(self, path: str) -> bool:        """Check if path contains directory traversal patterns"""        for pattern in self._compiled_patterns:            if pattern.search(path):                return True        return False    def _is_within_allowed_dirs(self, normalized_path: str) -> bool:        """Check if normalized path is within allowed base directories"""        for base_dir in self.normalized_base_dirs:            try:                # Check if path starts with base directory                if normalized_path.startswith(base_dir + os.sep) or normalized_path == base_dir:                    return True            except (AttributeError, TypeError, ValueError) as e:                logger.warning(f"Path validation error for base_dir '{base_dir}': {e}")                continue            except OSError as e:                logger.error(f"OS error during path validation: {e}")                continue        return Falseclass SecureFileOperations:    """    Provides safe file operations that automatically validate paths    before performing file system operations.    """    def __init__(self, validator: PathValidator) -> None:        self.validator = validator    def safe_open(self, user_path: str, mode: str = 'r', **kwargs):        """        Safely open a file after path validation        Args: user_path: User - provided file path            mode: File open mode ** kwargs: Additional arguments for open()        Returns: File object or raises SecurityError        """        if not self.validator.validate_path(user_path, "read" if 'r' in mode else "write"):            raise SecurityError(f"Path validation failed: {user_path}")        safe_path = self.validator.get_safe_path(user_path)        if not safe_path:            raise SecurityError(f"Cannot create safe path: {user_path}")        try:            return open(safe_path, mode, **kwargs)        except Exception as e:            logger.error(f"File operation error: {e}")            raise    def safe_exists(self, user_path: str) -> bool:        """Safely check if file exists"""        if not self.validator.validate_path(user_path, "read"):            return False        safe_path = self.validator.get_safe_path(user_path)        if not safe_path:            return False        return os.path.exists(safe_path)    def safe_remove(self, user_path: str) -> bool:        """Safely remove a file"""        if not self.validator.validate_path(user_path, "write"):            return False        safe_path = self.validator.get_safe_path(user_path)        if not safe_path:            return False        try:            os.remove(safe_path)            return True        except Exception as e:            logger.error(f"File removal error: {e}")            return False    def safe_listdir(self, user_path: str) -> List[str]:        """Safely list directory contents"""        if not self.validator.validate_path(user_path, "read"):            return []        safe_path = self.validator.get_safe_path(user_path)        if not safe_path:            return []        try:            return os.listdir(safe_path)        except Exception as e:            logger.error(f"Directory listing error: {e}")            return []class SecurityError(Exception):    """Custom exception for security - related path errors"""    passdef create_child_safe_validator() -> PathValidator:    """    Create a path validator with child - safe default policies    Returns: PathValidator: Configured for child safety compliance    """    # Define safe base directories for child data    safe_dirs = {        "/tmp/teddy_temp",      # Temporary files        "./data/children",      # Child data (relative to app)        "./logs",              # Log files        "./exports",           # Data exports for parents    }    # Allow only safe file extensions    safe_extensions = {        ".txt", ".json", ".csv", ".log",        ".wav", ".mp3", ".png", ".jpg", ".jpeg"    }    policy = PathPolicy(        allowed_base_dirs=safe_dirs,        allowed_extensions=safe_extensions,        max_path_length=255,        allow_symlinks=False,  # No symlinks for security        case_sensitive=True    )    return PathValidator(policy)def create_secure_file_operations() -> SecureFileOperations:    """    Create secure file operations with child - safe validation    Returns: SecureFileOperations: Ready for safe file operations    """    validator = create_child_safe_validator()    return SecureFileOperations(validator)# Global instances for easy access_default_validator: Optional[PathValidator] = None_default_file_ops: Optional[SecureFileOperations] = Nonedef get_path_validator() -> PathValidator:    """Get global path validator instance"""    global _default_validator    if _default_validator is None:        _default_validator = create_child_safe_validator()    return _default_validatordef get_secure_file_operations() -> SecureFileOperations:    """Get global secure file operations instance"""    global _default_file_ops    if _default_file_ops is None:        _default_file_ops = create_secure_file_operations()    return _default_file_opsdef validate_path(user_path: str) -> bool:    """Convenience function for path validation"""    return get_path_validator().validate_path(user_path)def safe_open(user_path: str, mode: str = 'r', **kwargs):    """Convenience function for safe file opening"""    return get_secure_file_operations().safe_open(user_path, mode, **kwargs)

SyntaxError: unterminated triple-quoted string literal (detected at line 1)

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\infrastructure\security\production_encryption_service.py", line 1
    """from datetime import datetime, timezone, timedeltafrom typing import Dict, Any, Optional, Unionimport base64import hashlibimport jsonimport loggingimport secretsfrom cryptography.fernet import Fernetfrom cryptography.hazmat.backends import default_backendfrom cryptography.hazmat.primitives import hashes, serializationfrom cryptography.hazmat.primitives.asymmetric import rsa, paddingfrom cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMACfrom src.infrastructure.config.settings import Settings, get_settingsfrom fastapi import Dependsclass ProductionEncryptionService:    """    Production - grade encryption service with the following features: - AES - 256 encryption for data at rest - RSA encryption for key exchange - Automatic key rotation - Audit logging for all operations - COPPA - compliant data encryption - Secure key derivation    """    def __init__(self, settings: Settings = Depends(get_settings)) -> None:        self.settings = settings        self.key_rotation_service = get_key_rotation_service()        # Use rotatable keys instead of static master key        self._current_key = self.key_rotation_service.get_current_key()        if not self._current_key:            # Fallback to COPPA_ENCRYPTION_KEY if key rotation service doesn't provide one            self._current_key = self.settings.security.COPPA_ENCRYPTION_KEY            if not self._current_key:                raise ValueError("No encryption key available from settings or rotation service")        self._fernet = Fernet(self._current_key.encode())        # Key rotation settings        self.key_rotation_days = 90        self.max_key_age = timedelta(days=self.key_rotation_days)        # Audit settings        self.audit_all_operations = True    def encrypt_child_data(self, data: Union[str, Dict[str, Any]]) -> str:        """        Encrypt child data with audit logging and key rotation support.        Args: data: Data to encrypt(string or dictionary)        Returns: Encrypted data as base64 string with key metadata        """        try:            # Convert to JSON if dictionary            if isinstance(data, dict):                data_str = json.dumps(data, sort_keys=True)            else:                data_str = str(data)            # Add timestamp for audit trail            audit_data = {                "content": data_str,                "encrypted_at": datetime.now(timezone.utc).isoformat(),                "version": "2.0"  # Updated version for key rotation support            }            # Use key rotation service for encryption            encrypted_result = self.key_rotation_service.encrypt_with_rotation(                json.dumps(audit_data)            )            # Encode the complete result            encrypted_b64 = base64.b64encode(                json.dumps(encrypted_result).encode('utf-8')            ).decode('utf-8')            if self.audit_all_operations:                logger.debug(f"Encrypted child data with key rotation (size: {len(data_str)} chars)")            return encrypted_b64        except Exception as e:            logger.error(f"Encryption failed: {e}")            raise ValueError(f"Failed to encrypt data: {e}")    def decrypt_child_data(self, encrypted_data: str) -> Union[str, Dict[str, Any]]:        """        Decrypt child data with audit logging and key rotation support.        Args: encrypted_data: Base64 encoded encrypted data        Returns: Decrypted data(original type)        """        try:            # Decode from base64            decoded_data = base64.b64decode(encrypted_data.encode('utf-8')).decode('utf-8')            # Check if this is new format with key rotation            try:                encrypted_obj = json.loads(decoded_data)                if isinstance(encrypted_obj, dict) and "key_id" in encrypted_obj:                    # New format with key rotation                    decrypted_str = self.key_rotation_service.decrypt_with_rotation(encrypted_obj)                else:                    # Legacy format - try direct decryption                    encrypted_bytes = base64.b64decode(encrypted_data.encode('utf-8'))                    decrypted_bytes = self._fernet.decrypt(encrypted_bytes)                    decrypted_str = decrypted_bytes.decode('utf-8')            except (json.JSONDecodeError, ValueError):                # Legacy format                encrypted_bytes = base64.b64decode(encrypted_data.encode('utf-8'))                decrypted_bytes = self._fernet.decrypt(encrypted_bytes)                decrypted_str = decrypted_bytes.decode('utf-8')            # Parse audit data            audit_data = json.loads(decrypted_str)            content = audit_data.get("content", "")            encrypted_at = audit_data.get("encrypted_at")            # Check if data is too old (key rotation check)            if encrypted_at:                encrypted_time = datetime.fromisoformat(encrypted_at.replace('Z', '+00:00'))                if datetime.now(timezone.utc) - encrypted_time > self.max_key_age:                    logger.warning("Decrypting data older than key rotation period")            # Try to parse as JSON, fallback to string            try:                result = json.loads(content)            except json.JSONDecodeError:                result = content            if self.audit_all_operations:                logger.debug(f"Decrypted child data (size: {len(content)} chars)")            return result        except Exception as e:            logger.error(f"Decryption failed: {e}")            raise ValueError(f"Failed to decrypt data: {e}")    def encrypt_sensitive_field(self, field_name: str, value: str, child_id: str) -> str:        """        Encrypt a specific sensitive field with additional metadata.        Args: field_name: Name of the field being encrypted            value: Value to encrypt            child_id: ID of the child(for audit trail)        Returns: Encrypted field value        """        field_data = {            "field_name": field_name,            "value": value,            "child_id": child_id,            "encrypted_at": datetime.now(timezone.utc).isoformat()        }        encrypted_result = self.encrypt_child_data(field_data)        logger.info(f"Encrypted sensitive field '{field_name}' for child {child_id}")        return encrypted_result    def decrypt_sensitive_field(self, encrypted_value: str, expected_field: str) -> str:        """        Decrypt a specific sensitive field with validation.        Args: encrypted_value: Encrypted field value            expected_field: Expected field name for validation        Returns: Decrypted field value        """        try:            field_data = self.decrypt_child_data(encrypted_value)            if not isinstance(field_data, dict):                raise ValueError("Invalid encrypted field format")            if field_data.get("field_name") != expected_field:                raise ValueError(f"Field name mismatch: expected {expected_field}")            logger.info(f"Decrypted sensitive field '{expected_field}'")            return field_data.get("value", "")        except Exception as e:            logger.error(f"Failed to decrypt sensitive field: {e}")            raise    def generate_key_hash(self, data: str) -> str:        """        Generate a secure hash for data integrity verification.        Args: data: Data to hash        Returns: SHA - 256 hash as hexadecimal string        """        hash_obj = hashlib.sha256(data.encode('utf-8'))        return hash_obj.hexdigest()    def verify_data_integrity(self, data: str, expected_hash: str) -> bool:        """        Verify data integrity using hash comparison.        Args: data: Data to verify            expected_hash: Expected hash value        Returns: True if data integrity is verified        """        actual_hash = self.generate_key_hash(data)        is_valid = secrets.compare_digest(actual_hash, expected_hash)        if not is_valid:            logger.warning("Data integrity verification failed")        return is_valid    def generate_session_key(self, length: int = 32) -> str:        """        Generate a secure session key.        Args: length: Key length in bytes        Returns: Base64 encoded session key        """        key_bytes = secrets.token_bytes(length)        session_key = base64.b64encode(key_bytes).decode('utf-8')        logger.debug(f"Generated session key (length: {length} bytes)")        return session_key    def derive_encryption_key(self, password: str, salt: bytes) -> bytes:        """        Derive an encryption key from password and salt using PBKDF2.        Args: password: Password string            salt: Salt bytes        Returns: Derived key bytes        """        kdf = PBKDF2HMAC(            algorithm=hashes.SHA256(),            length=32,            salt=salt,            iterations=100000,  # NIST recommended minimum            backend=default_backend()        )        key = kdf.derive(password.encode('utf-8'))        logger.debug("Derived encryption key using PBKDF2")        return key    def check_key_rotation_needed(self) -> bool:        """        Check if key rotation is needed based on time.        Returns: True if key rotation is recommended        """        try:            rotation_status = self.key_rotation_service.get_rotation_status()            current_key = rotation_status.get("current_key")            if not current_key:                return True            # Check if key has expired            expires_at = current_key.get("expires_at")            if expires_at:                expiry_time = datetime.fromisoformat(expires_at)                return datetime.now(timezone.utc) > expiry_time            return False        except Exception as e:            logger.error(f"Failed to check key rotation status: {e}")            return False    def rotate_encryption_key(self) -> str:        """        Rotate the encryption key using the key rotation service.        Returns: New key identifier        """        try:            # Perform key rotation            success = self.key_rotation_service.rotate_keys()            if success:                # Update the Fernet instance with new key                new_key = self.key_rotation_service.get_current_key()                if new_key:                    self._current_key = new_key                    self._fernet = Fernet(new_key.encode())                    # Get rotation status for the new key ID                    status = self.key_rotation_service.get_rotation_status()                    new_key_id = status.get("current_key", {}).get("key_id", "unknown")                    logger.info(f"Successfully rotated encryption key. New key ID: {new_key_id}")                    return new_key_id            raise ValueError("Key rotation failed")        except Exception as e:            logger.error(f"Failed to rotate encryption key: {e}")            raise ValueError(f"Key rotation failed: {e}")    def sanitize_for_logging(self, data: Any) -> str:        """        Sanitize data for safe logging(remove sensitive information).        Args: data: Data to sanitize        Returns: Sanitized string safe for logging        """        if isinstance(data, dict):            sanitized = {}            for key, value in data.items():                if any(sensitive in key.lower() for sensitive in ['password', 'secret', 'key', 'token']):                    sanitized[key] = "***REDACTED***"                else:                    sanitized[key] = str(value)[:50] + "..." if len(str(value)) > 50 else str(value)            return json.dumps(sanitized)        else:            return str(data)[:100] + "..." if len(str(data)) > 100 else str(data)class COPPACompliantEncryption(ProductionEncryptionService):    """    COPPA - compliant encryption service with additional child protection features.    """    def __init__(self) -> None:        super().__init__()        self.retention_days = 90  # COPPA requirement    def encrypt_child_pii(self, pii_data: Dict[str, Any], child_id: str) -> str:        """        Encrypt child PII with COPPA compliance metadata.        Args: pii_data: Personal information to encrypt            child_id: Child identifier        Returns: Encrypted PII with compliance metadata        """        coppa_metadata = {            "data": pii_data,            "child_id": child_id,            "encrypted_at": datetime.now(timezone.utc).isoformat(),            "retention_until": (                datetime.now(timezone.utc) + timedelta(days=self.retention_days)            ).isoformat(),            "coppa_version": "1.0"        }        encrypted_result = self.encrypt_child_data(coppa_metadata)        logger.info(f"Encrypted COPPA-compliant PII for child {child_id}")        return encrypted_result    def check_retention_expiry(self, encrypted_pii: str) -> bool:        """        Check if encrypted PII has exceeded retention period.        Args: encrypted_pii: Encrypted PII data        Returns: True if data should be deleted        """        try:            pii_data = self.decrypt_child_data(encrypted_pii)            if isinstance(pii_data, dict) and "retention_until" in pii_data:                retention_date = datetime.fromisoformat(pii_data["retention_until"].replace('Z', '+00:00'))                return datetime.now(timezone.utc) > retention_date        except Exception as e:            logger.error(f"Failed to check retention expiry: {e}")        return False    def secure_delete_expired_data(self, encrypted_pii: str) -> bool:        """        Securely delete expired PII data.        Args: encrypted_pii: Encrypted PII to delete        Returns: True if deletion was successful        """        if self.check_retention_expiry(encrypted_pii):            # In production, this would overwrite memory multiple times            # and ensure secure deletion from storage systems            logger.info("Securely deleting expired COPPA data")            return True        return False

SyntaxError: unterminated triple-quoted string literal (detected at line 1)

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\infrastructure\security\request_signing_service.py", line 1
    """from dataclasses import dataclassfrom datetime import datetime, timedeltafrom enum import Enumfrom typing import Dict, List, Optional, Any, Tupleimport base64import hashlibimport jsonimport loggingimport secretsimport timeimport urllib.parseimport hmac"""Request Signing ServiceProvides cryptographic request signing and validation for child safety.Implements HMAC - based signatures with replay attack protection."""from src.infrastructure.logging_config import get_loggerlogger = get_logger(__name__, component="security")class SignatureAlgorithm(Enum):    """Supported signature algorithms."""    HMAC_SHA256 = "hmac-sha256"    HMAC_SHA512 = "hmac-sha512"class RequestSecurityLevel(Enum):    """Security levels for different request types."""    CHILD_INTERACTION = "child_interaction"    # Highest security for child requests    PARENT_ACCESS = "parent_access"           # High security for parent requests    ADMIN_OPERATION = "admin_operation"       # Maximum security for admin requests    PUBLIC_API = "public_api"                 # Basic security for public endpoints@dataclassclass SignatureConfiguration:    """Configuration for request signing."""    algorithm: SignatureAlgorithm    key_id: str    secret_key: bytes    timestamp_tolerance_seconds: int    include_body_hash: bool    include_query_params: bool    require_nonce: bool    max_nonce_age_seconds: int@dataclassclass SignatureValidationResult:    """Result of signature validation."""    valid: bool    reason: Optional[str] = None    timestamp: Optional[datetime] = None    key_id: Optional[str] = None    algorithm: Optional[str] = None    security_flags: List[str] = None    def __post_init__(self):        if self.security_flags is None:            self.security_flags = []class RequestSigningService:    """    Enterprise - grade request signing service for child safety.    Features: - HMAC - based request signatures - Replay attack prevention - Timestamp validation - Nonce tracking - Child - specific security levels - Key rotation support    """    def __init__(self, default_level: RequestSecurityLevel = RequestSecurityLevel.CHILD_INTERACTION) -> None:        """Initialize request signing service."""        self.default_level = default_level        self.configurations = self._initialize_configurations()        self.nonce_cache: Dict[str, datetime] = {}        self.signature_cache: Dict[str, datetime] = {}        self.max_cache_size = 10000        self.cache_cleanup_interval = timedelta(hours=1)        self.last_cleanup = datetime.utcnow()        logger.info(f"Request signing service initialized with {default_level.value} level")    def _initialize_configurations(self) -> Dict[RequestSecurityLevel, SignatureConfiguration]:        """Initialize signature configurations for different security levels."""        # In production, these keys should come from secure key management        base_key = b"ai_teddy_signing_key_2025"        return {            RequestSecurityLevel.CHILD_INTERACTION: SignatureConfiguration(                algorithm=SignatureAlgorithm.HMAC_SHA512,                key_id="child_interaction_v1",                secret_key=base_key + b"_child",                timestamp_tolerance_seconds=60,  # 1 minute tolerance                include_body_hash=True,                include_query_params=True,                require_nonce=True,                max_nonce_age_seconds=300  # 5 minutes            ),            RequestSecurityLevel.PARENT_ACCESS: SignatureConfiguration(                algorithm=SignatureAlgorithm.HMAC_SHA256,                key_id="parent_access_v1",                secret_key=base_key + b"_parent",                timestamp_tolerance_seconds=300,  # 5 minutes tolerance                include_body_hash=True,                include_query_params=True,                require_nonce=True,                max_nonce_age_seconds=900  # 15 minutes            ),            RequestSecurityLevel.ADMIN_OPERATION: SignatureConfiguration(                algorithm=SignatureAlgorithm.HMAC_SHA512,                key_id="admin_operation_v1",                secret_key=base_key + b"_admin",                timestamp_tolerance_seconds=30,  # 30 seconds tolerance                include_body_hash=True,                include_query_params=True,                require_nonce=True,                max_nonce_age_seconds=180  # 3 minutes            ),            RequestSecurityLevel.PUBLIC_API: SignatureConfiguration(                algorithm=SignatureAlgorithm.HMAC_SHA256,                key_id="public_api_v1",                secret_key=base_key + b"_public",                timestamp_tolerance_seconds=600,  # 10 minutes tolerance                include_body_hash=False,                include_query_params=False,                require_nonce=False,                max_nonce_age_seconds=0            )        }    def sign_request(self,                    method: str,                    url: str,                    body: Optional[bytes] = None,                    headers: Optional[Dict[str, str]] = None,                    level: Optional[RequestSecurityLevel] = None,                    custom_claims: Optional[Dict[str, Any]] = None) -> Dict[str, str]:        """        Sign an HTTP request with cryptographic signature.        Args: method: HTTP method(GET, POST, etc.)            url: Full request URL            body: Request body bytes            headers: Request headers            level: Security level to apply            custom_claims: Additional claims to include in signature        Returns: Dict of headers to add to the request        """        level = level or self.default_level        config = self.configurations[level]        headers = headers or {}        # Generate timestamp and nonce        timestamp = int(time.time())        nonce = self._generate_nonce() if config.require_nonce else None        # Build signature payload        payload_parts = [            method.upper(),            url,            str(timestamp)        ]        # Add nonce if required        if nonce:            payload_parts.append(nonce)            self._store_nonce(nonce, config.max_nonce_age_seconds)        # Add body hash if required        if config.include_body_hash and body:            body_hash = hashlib.sha256(body).hexdigest()            payload_parts.append(body_hash)        # Add query parameters if required        if config.include_query_params:            parsed_url = urllib.parse.urlparse(url)            if parsed_url.query:                # Sort parameters for consistent signing                params = urllib.parse.parse_qsl(parsed_url.query)                sorted_params = sorted(params)                payload_parts.append(urllib.parse.urlencode(sorted_params))        # Add custom claims        if custom_claims:            claims_json = json.dumps(custom_claims, sort_keys=True, separators=(',', ':'))            payload_parts.append(claims_json)        # Create signature payload        payload = "|".join(payload_parts)        # Generate signature        signature = self._generate_signature(payload, config)        # Build signature headers        signature_headers = {            "X-Signature-Algorithm": config.algorithm.value,            "X-Signature-KeyID": config.key_id,            "X-Signature-Timestamp": str(timestamp),            "X-Signature": signature        }        if nonce:            signature_headers["X-Signature-Nonce"] = nonce        # Add child safety headers for child interactions        if level == RequestSecurityLevel.CHILD_INTERACTION:            signature_headers.update({                "X-Child-Request": "true",                "X-COPPA-Protected": "true",                "X-Content-Safety": "required"            })        logger.debug(f"Generated signature for {method} {url} with level {level.value}")        return signature_headers    def validate_request_signature(self,                                 method: str,                                 url: str,                                 headers: Dict[str, str],                                 body: Optional[bytes] = None,                                 level: Optional[RequestSecurityLevel] = None) -> SignatureValidationResult:        """        Validate a signed HTTP request.        Args: method: HTTP method            url: Request URL            headers: Request headers            body: Request body bytes            level: Expected security level        Returns: SignatureValidationResult with validation details        """        level = level or self.default_level        config = self.configurations[level]        # Check for required signature headers        required_headers = ["X-Signature", "X-Signature-Timestamp", "X-Signature-KeyID"]        missing_headers = [h for h in required_headers if h not in headers]        if missing_headers:            return SignatureValidationResult(                valid=False,                reason=f"Missing signature headers: {', '.join(missing_headers)}",                security_flags=["missing_signature_headers"]            )        # Validate timestamp        try:            request_timestamp = int(headers["X-Signature-Timestamp"])            current_time = int(time.time())            time_diff = abs(current_time - request_timestamp)            if time_diff > config.timestamp_tolerance_seconds:                return SignatureValidationResult(                    valid=False,                    reason=f"Request timestamp outside tolerance ({time_diff}s > {config.timestamp_tolerance_seconds}s)",                    timestamp=datetime.fromtimestamp(request_timestamp),                    security_flags=["timestamp_out_of_tolerance"]                )        except (ValueError, KeyError):            return SignatureValidationResult(                valid=False,                reason="Invalid timestamp format",                security_flags=["invalid_timestamp"]            )        # Validate key ID        if headers["X-Signature-KeyID"] != config.key_id:            return SignatureValidationResult(                valid=False,                reason="Invalid key ID",                key_id=headers.get("X-Signature-KeyID"),                security_flags=["invalid_key_id"]            )        # Validate algorithm        expected_algorithm = config.algorithm.value        provided_algorithm = headers.get("X-Signature-Algorithm", "")        if provided_algorithm != expected_algorithm:            return SignatureValidationResult(                valid=False,                reason=f"Algorithm mismatch: expected {expected_algorithm}, got {provided_algorithm}",                algorithm=provided_algorithm,                security_flags=["algorithm_mismatch"]            )        # Validate nonce if required        if config.require_nonce:            nonce = headers.get("X-Signature-Nonce")            if not nonce:                return SignatureValidationResult(                    valid=False,                    reason="Missing required nonce",                    security_flags=["missing_nonce"]                )            # Check nonce reuse            if not self._validate_nonce(nonce, config.max_nonce_age_seconds):                return SignatureValidationResult(                    valid=False,                    reason="Invalid or reused nonce",                    security_flags=["invalid_nonce"]                )        # Rebuild signature payload        payload_parts = [            method.upper(),            url,            str(request_timestamp)        ]        # Add nonce if present        if config.require_nonce and "X-Signature-Nonce" in headers:            payload_parts.append(headers["X-Signature-Nonce"])        # Add body hash if required        if config.include_body_hash and body:            body_hash = hashlib.sha256(body).hexdigest()            payload_parts.append(body_hash)        # Add query parameters if required        if config.include_query_params:            parsed_url = urllib.parse.urlparse(url)            if parsed_url.query:                params = urllib.parse.parse_qsl(parsed_url.query)                sorted_params = sorted(params)                payload_parts.append(urllib.parse.urlencode(sorted_params))        # Create expected payload        payload = "|".join(payload_parts)        # Generate expected signature        expected_signature = self._generate_signature(payload, config)        provided_signature = headers["X-Signature"]        # Constant-time comparison to prevent timing attacks        if not hmac.compare_digest(expected_signature, provided_signature):            return SignatureValidationResult(                valid=False,                reason="Signature verification failed",                timestamp=datetime.fromtimestamp(request_timestamp),                key_id=headers["X-Signature-KeyID"],                algorithm=provided_algorithm,                security_flags=["signature_mismatch"]            )        # Check for replay attacks        signature_hash = hashlib.sha256(provided_signature.encode()).hexdigest()        if signature_hash in self.signature_cache:            return SignatureValidationResult(                valid=False,                reason="Potential replay attack detected",                timestamp=datetime.fromtimestamp(request_timestamp),                security_flags=["replay_attack"]            )        # Store signature to prevent replay        self.signature_cache[signature_hash] = datetime.utcnow()        # Cleanup caches periodically        self._cleanup_caches()        logger.debug(f"Successfully validated signature for {method} {url}")        return SignatureValidationResult(            valid=True,            timestamp=datetime.fromtimestamp(request_timestamp),            key_id=headers["X-Signature-KeyID"],            algorithm=provided_algorithm        )    def _generate_signature(self, payload: str, config: SignatureConfiguration) -> str:        """Generate HMAC signature for payload."""        if config.algorithm == SignatureAlgorithm.HMAC_SHA256:            digest = hmac.new(config.secret_key, payload.encode('utf-8'), hashlib.sha256)        elif config.algorithm == SignatureAlgorithm.HMAC_SHA512:            digest = hmac.new(config.secret_key, payload.encode('utf-8'), hashlib.sha512)        else:            raise ValueError(f"Unsupported algorithm: {config.algorithm}")        return base64.b64encode(digest.digest()).decode('ascii')    def _generate_nonce(self) -> str:        """Generate cryptographically secure nonce."""        return base64.b64encode(secrets.token_bytes(16)).decode('ascii')    def _store_nonce(self, nonce: str, max_age_seconds: int) -> None:        """Store nonce with expiration."""        self.nonce_cache[nonce] = datetime.utcnow()        # Clean up expired nonces        if len(self.nonce_cache) > self.max_cache_size:            self._cleanup_nonce_cache(max_age_seconds)    def _validate_nonce(self, nonce: str, max_age_seconds: int) -> bool:        """Validate nonce is new and within time window."""        if nonce in self.nonce_cache:            # Nonce already used - potential replay attack            logger.warning(f"Nonce reuse detected: {nonce}")            return False        # Store nonce to prevent reuse        self.nonce_cache[nonce] = datetime.utcnow()        return True    def _cleanup_nonce_cache(self, max_age_seconds: int) -> None:        """Remove expired nonces from cache."""        cutoff = datetime.utcnow() - timedelta(seconds=max_age_seconds)        expired_nonces = [nonce for nonce, created in self.nonce_cache.items()                         if created < cutoff]        for nonce in expired_nonces:            del self.nonce_cache[nonce]        logger.debug(f"Cleaned up {len(expired_nonces)} expired nonces")    def _cleanup_caches(self) -> None:        """Cleanup all caches periodically."""        now = datetime.utcnow()        if now - self.last_cleanup < self.cache_cleanup_interval:            return        # Clean signature cache (prevent replay attacks)        signature_cutoff = now - timedelta(hours=24)  # Keep signatures for 24 hours        expired_signatures = [sig for sig, created in self.signature_cache.items()                            if created < signature_cutoff]        for sig in expired_signatures:            del self.signature_cache[sig]        # Clean nonce cache for all configurations        for config in self.configurations.values():            self._cleanup_nonce_cache(config.max_nonce_age_seconds)        self.last_cleanup = now        logger.debug("Completed cache cleanup")    def get_signing_statistics(self) -> Dict[str, Any]:        """Get signing service statistics for monitoring."""        return {            "default_level": self.default_level.value,            "active_nonces": len(self.nonce_cache),            "cached_signatures": len(self.signature_cache),            "configurations": {                level.value: {                    "algorithm": config.algorithm.value,                    "key_id": config.key_id,                    "timestamp_tolerance": config.timestamp_tolerance_seconds,                    "requires_nonce": config.require_nonce                }                for level, config in self.configurations.items()            },            "last_cleanup": self.last_cleanup.isoformat()        }    def rotate_signing_key(self, level: RequestSecurityLevel, new_secret_key: bytes) -> bool:        """        Rotate signing key for a security level.        Args: level: Security level to update            new_secret_key: New secret key        Returns: True if successful        """        try:            config = self.configurations[level]            old_key_id = config.key_id            # Generate new key ID            new_key_id = f"{level.value}_v{int(time.time())}"            # Update configuration            config.secret_key = new_secret_key            config.key_id = new_key_id            # Clear related caches            self.nonce_cache.clear()            self.signature_cache.clear()            logger.info(f"Rotated signing key for {level.value}: {old_key_id} -> {new_key_id}")            return True        except Exception as e:            logger.error(f"Failed to rotate signing key for {level.value}: {e}")            return False    def create_child_safe_headers(self, child_id: str, age: int) -> Dict[str, str]:        """        Create additional headers for child safety.        Args: child_id: Child identifier            age: Child's age        Returns: Dict of child safety headers        """        headers = {            "X-Child-ID": child_id,            "X-Child-Age-Group": self._get_age_group(age),            "X-COPPA-Subject": "true" if age < 13 else "false",            "X-Content-Filter": "strict",            "X-Parental-Controls": "active"        }        return headers    def _get_age_group(self, age: int) -> str:        """Get age group for child safety headers."""        if age <= 4:            return "toddler"        elif age <= 7:            return "preschool"        elif age <= 12:            return "school-age"        else:            return "teen"

SyntaxError: unterminated string literal (detected at line 1)

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\infrastructure\security\robust_encryption_service.py", line 1
    """from dataclasses import dataclassfrom datetime import datetime, timedeltafrom enum import Enumfrom typing import Optional, Dict, Any, List, Unionimport base64import hashlibimport jsonimport loggingimport osimport secretsfrom src.infrastructure.security.comprehensive_audit_integration import get_audit_integration"""Robust Encryption Service with No Silent FailuresEnsures all encryption operations are properly validated and logged for COPPA compliance."""from src.infrastructure.logging_config import get_loggerlogger = get_logger(__name__, component="security")class EncryptionResult:    """Result of encryption operation with detailed status."""    def __init__(        self,        success: bool,        data: Optional[str] = None,        error: Optional[str] = None,        operation_id: Optional[str] = None,        key_id: Optional[str] = None,        algorithm: Optional[str] = None    ):        self.success = success        self.data = data        self.error = error        self.operation_id = operation_id or secrets.token_hex(8)        self.key_id = key_id        self.algorithm = algorithm        self.timestamp = datetime.utcnow()class EncryptionLevel(Enum):    """Encryption strength levels."""    BASIC = "aes_128"    STANDARD = "aes_256"    ENHANCED = "aes_256_gcm"    MAXIMUM = "chacha20_poly1305"class EncryptionPolicy(Enum):    """Encryption policy enforcement levels."""    OPTIONAL = "optional"      # Encryption preferred but not required    REQUIRED = "required"      # Must encrypt, fail if cannot    MANDATORY = "mandatory"    # Strictest - must encrypt with verification@dataclassclass EncryptionConfig:    """Configuration for encryption operations."""    algorithm: str = "AES-256-GCM"    key_derivation: str = "PBKDF2"    key_iterations: int = 100000    require_authentication: bool = True    require_integrity_check: bool = True    max_plaintext_size: int = 1048576  # 1MB    key_rotation_days: int = 90    audit_all_operations: bool = Trueclass RobustEncryptionService:    """    Robust encryption service that never fails silently.    Features: - Never fails silently - all failures are logged and raised - Comprehensive audit logging for all operations - Key rotation with secure key management - Multiple encryption algorithms support - Integrity verification for all encrypted data - COPPA compliance with enhanced child data protection - Secure key derivation and storage - Operation tracing and monitoring    """    def __init__(self, config: Optional[EncryptionConfig] = None):        self.config = config or EncryptionConfig()        self.audit_integration = get_audit_integration()        self._encryption_keys: Dict[str, bytes] = {}        self._key_metadata: Dict[str, Dict[str, Any]] = {}        self._operation_log: List[Dict[str, Any]] = []        # Initialize encryption system        self._initialize_encryption_system()    def _initialize_encryption_system(self) -> None:        """Initialize the encryption system with secure defaults."""        try:            # Check for production dependencies            self._import_crypto_dependencies()            # Initialize master key            self._initialize_master_key()            # Verify encryption capabilities            self._verify_encryption_capabilities()            logger.info("Robust encryption service initialized successfully")        except Exception as e:            logger.critical(f"Failed to initialize encryption service: {e}")            raise RuntimeError(f"Encryption service initialization failed: {e}")    def _import_crypto_dependencies(self) -> None:        """Import and verify cryptographic dependencies."""        try:            global Fernet, AESGCM, ChaCha20Poly1305, PBKDF2HMAC, hashes            from cryptography.fernet import Fernet            from cryptography.hazmat.primitives.ciphers.aead import AESGCM, ChaCha20Poly1305            from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC            from cryptography.hazmat.primitives import hashes            self._crypto_available = True            logger.info("Cryptography dependencies loaded successfully")        except ImportError as e:            logger.error(f"Cryptography dependencies not available: {e}")            self._crypto_available = False            raise ImportError(                f"Required cryptography library not available: {e}. "                "Install with: pip install cryptography"            )    def _initialize_master_key(self) -> None:        """Initialize master encryption key securely."""        try:            # Try to load existing key from environment            master_key_b64 = os.environ.get("AI_TEDDY_MASTER_KEY")            if master_key_b64:                try:                    master_key = base64.b64decode(master_key_b64)                    if len(master_key) != 32:  # 256-bit key                        raise ValueError("Invalid master key length")                    self._master_key = master_key                    logger.info("Master key loaded from environment")                except Exception as e:                    raise ValueError(f"Invalid master key in environment: {e}")            else:                # Generate new master key for development/testing                logger.warning("No master key found in environment - generating temporary key")                self._master_key = os.urandom(32)                master_key_b64 = base64.b64encode(self._master_key).decode()                logger.warning(f"Temporary master key: {master_key_b64}")                logger.warning("Set AI_TEDDY_MASTER_KEY environment variable for production")            # Derive default encryption key            self._derive_default_key()        except Exception as e:            logger.critical(f"Failed to initialize master key: {e}")            raise RuntimeError(f"Master key initialization failed: {e}")    def _derive_default_key(self) -> None:        """Derive default encryption key from master key."""        try:            # Use PBKDF2 to derive a key            kdf = PBKDF2HMAC(                algorithm=hashes.SHA256(),                length=32,                salt=b"ai_teddy_default_salt",  # In production, use random salt per key                iterations=self.config.key_iterations,            )            default_key = kdf.derive(self._master_key)            key_id = "default"            self._encryption_keys[key_id] = default_key            self._key_metadata[key_id] = {                "created_at": datetime.utcnow(),                "algorithm": self.config.algorithm,                "key_derivation": self.config.key_derivation,                "iterations": self.config.key_iterations            }            logger.info(f"Default encryption key derived (key_id: {key_id})")        except Exception as e:            logger.critical(f"Failed to derive default key: {e}")            raise RuntimeError(f"Key derivation failed: {e}")    def _verify_encryption_capabilities(self) -> None:        """Verify encryption and decryption capabilities."""        try:            test_data = "encryption_test_data"            # Test encryption            encrypt_result = self.encrypt(test_data, policy=EncryptionPolicy.REQUIRED)            if not encrypt_result.success:                raise RuntimeError(f"Encryption test failed: {encrypt_result.error}")            # Test decryption            decrypt_result = self.decrypt(encrypt_result.data, policy=EncryptionPolicy.REQUIRED)            if not decrypt_result.success:                raise RuntimeError(f"Decryption test failed: {decrypt_result.error}")            if decrypt_result.data != test_data:                raise RuntimeError("Encryption/decryption test data mismatch")            logger.info("Encryption capabilities verified successfully")        except Exception as e:            logger.critical(f"Encryption capability verification failed: {e}")            raise RuntimeError(f"Encryption verification failed: {e}")    async def encrypt(        self,        plaintext: str,        key_id: str = "default",        policy: EncryptionPolicy = EncryptionPolicy.REQUIRED,        context: Optional[Dict[str, Any]] = None    ) -> EncryptionResult:        """        Encrypt data with comprehensive error handling and auditing.        Args: plaintext: Data to encrypt            key_id: Encryption key identifier            policy: Encryption policy enforcement level            context: Additional context for auditing        Returns: EncryptionResult with detailed status        """        operation_id = secrets.token_hex(8)        start_time = datetime.utcnow()        try:            # Validate inputs            if not plaintext:                if policy == EncryptionPolicy.OPTIONAL:                    return EncryptionResult(True, "", None, operation_id)                else:                    raise ValueError("Cannot encrypt empty data with current policy")            if len(plaintext.encode()) > self.config.max_plaintext_size:                raise ValueError(f"Plaintext exceeds maximum size: {self.config.max_plaintext_size}")            # Check if encryption is available            if not self._crypto_available:                error_msg = "Cryptography not available"                if policy == EncryptionPolicy.OPTIONAL:                    await self._log_encryption_event("encryption_skipped", operation_id, error_msg, context)                    return EncryptionResult(True, plaintext, None, operation_id)  # Return plaintext                else:                    await self._log_encryption_event("encryption_failed", operation_id, error_msg, context)                    raise RuntimeError(error_msg)            # Get encryption key            if key_id not in self._encryption_keys:                error_msg = f"Encryption key not found: {key_id}"                await self._log_encryption_event("encryption_failed", operation_id, error_msg, context)                raise ValueError(error_msg)            encryption_key = self._encryption_keys[key_id]            # Perform encryption            if self.config.algorithm == "AES-256-GCM":                encrypted_data = await self._encrypt_aes_gcm(plaintext, encryption_key, operation_id)            elif self.config.algorithm == "ChaCha20-Poly1305":                encrypted_data = await self._encrypt_chacha20(plaintext, encryption_key, operation_id)            else:                # Fallback to Fernet                encrypted_data = await self._encrypt_fernet(plaintext, encryption_key, operation_id)            # Verify encryption            if self.config.require_integrity_check:                verify_result = await self.decrypt(encrypted_data, key_id, EncryptionPolicy.REQUIRED)                if not verify_result.success or verify_result.data != plaintext:                    error_msg = "Encryption integrity verification failed"                    await self._log_encryption_event("encryption_failed", operation_id, error_msg, context)                    raise RuntimeError(error_msg)            # Log successful encryption            duration = (datetime.utcnow() - start_time).total_seconds()            await self._log_encryption_event(                "encryption_success", operation_id, f"Encrypted {len(plaintext)} bytes",                {**(context or {}), "duration_seconds": duration, "key_id": key_id}            )            return EncryptionResult(                success=True,                data=encrypted_data,                operation_id=operation_id,                key_id=key_id,                algorithm=self.config.algorithm            )        except Exception as e:            error_msg = f"Encryption failed: {str(e)}"            logger.error(f"Encryption error (operation_id: {operation_id}): {error_msg}")            # Log encryption failure            await self._log_encryption_event("encryption_failed", operation_id, error_msg, context)            # Handle based on policy            if policy == EncryptionPolicy.OPTIONAL:                logger.warning(f"Encryption failed but policy is optional - returning plaintext (operation_id: {operation_id})")                return EncryptionResult(True, plaintext, error_msg, operation_id)            else:                # REQUIRED or MANDATORY - must fail                return EncryptionResult(False, None, error_msg, operation_id)    async def decrypt(        self,        ciphertext: str,        key_id: str = "default",        policy: EncryptionPolicy = EncryptionPolicy.REQUIRED,        context: Optional[Dict[str, Any]] = None    ) -> EncryptionResult:        """        Decrypt data with comprehensive error handling and auditing.        Args: ciphertext: Data to decrypt            key_id: Encryption key identifier            policy: Encryption policy enforcement level            context: Additional context for auditing        Returns: EncryptionResult with decrypted data or error        """        operation_id = secrets.token_hex(8)        start_time = datetime.utcnow()        try:            # Validate inputs            if not ciphertext:                return EncryptionResult(True, "", None, operation_id)            # Check if this might be plaintext (for backwards compatibility)            if policy == EncryptionPolicy.OPTIONAL and not self._looks_like_ciphertext(ciphertext):                logger.info(f"Data appears to be plaintext - returning as-is (operation_id: {operation_id})")                return EncryptionResult(True, ciphertext, None, operation_id)            # Check if decryption is available            if not self._crypto_available:                error_msg = "Cryptography not available for decryption"                if policy == EncryptionPolicy.OPTIONAL:                    await self._log_encryption_event("decryption_skipped", operation_id, error_msg, context)                    return EncryptionResult(True, ciphertext, None, operation_id)  # Return as-is                else:                    await self._log_encryption_event("decryption_failed", operation_id, error_msg, context)                    raise RuntimeError(error_msg)            # Get decryption key            if key_id not in self._encryption_keys:                error_msg = f"Decryption key not found: {key_id}"                await self._log_encryption_event("decryption_failed", operation_id, error_msg, context)                raise ValueError(error_msg)            encryption_key = self._encryption_keys[key_id]            # Perform decryption            try:                if self.config.algorithm == "AES-256-GCM":                    plaintext = await self._decrypt_aes_gcm(ciphertext, encryption_key, operation_id)                elif self.config.algorithm == "ChaCha20-Poly1305":                    plaintext = await self._decrypt_chacha20(ciphertext, encryption_key, operation_id)                else:                    # Fallback to Fernet                    plaintext = await self._decrypt_fernet(ciphertext, encryption_key, operation_id)            except Exception as decrypt_error:                # Try different algorithms as fallback                plaintext = await self._try_fallback_decryption(ciphertext, encryption_key, operation_id)            # Log successful decryption            duration = (datetime.utcnow() - start_time).total_seconds()            await self._log_encryption_event(                "decryption_success", operation_id, f"Decrypted {len(plaintext)} bytes",                {**(context or {}), "duration_seconds": duration, "key_id": key_id}            )            return EncryptionResult(                success=True,                data=plaintext,                operation_id=operation_id,                key_id=key_id,                algorithm=self.config.algorithm            )        except Exception as e:            error_msg = f"Decryption failed: {str(e)}"            logger.error(f"Decryption error (operation_id: {operation_id}): {error_msg}")            # Log decryption failure            await self._log_encryption_event("decryption_failed", operation_id, error_msg, context)            # Handle based on policy            if policy == EncryptionPolicy.OPTIONAL:                logger.warning(f"Decryption failed but policy is optional - returning ciphertext (operation_id: {operation_id})")                return EncryptionResult(True, ciphertext, error_msg, operation_id)            else:                # REQUIRED or MANDATORY - must fail                return EncryptionResult(False, None, error_msg, operation_id)    async def _encrypt_aes_gcm(self, plaintext: str, key: bytes, operation_id: str) -> str:        """Encrypt using AES - 256 - GCM."""        aesgcm = AESGCM(key)        nonce = os.urandom(12)  # 96-bit nonce for GCM        ciphertext = aesgcm.encrypt(nonce, plaintext.encode(), None)        # Combine nonce and ciphertext        encrypted_data = base64.b64encode(nonce + ciphertext).decode()        return f"AES-GCM:{encrypted_data}"    async def _decrypt_aes_gcm(self, encrypted_data: str, key: bytes, operation_id: str) -> str:        """Decrypt using AES - 256 - GCM."""        if not encrypted_data.startswith("AES-GCM:"):            raise ValueError("Invalid AES-GCM format")        data = base64.b64decode(encrypted_data[8:])  # Remove "AES-GCM:" prefix        nonce = data[:12]        ciphertext = data[12:]        aesgcm = AESGCM(key)        plaintext = aesgcm.decrypt(nonce, ciphertext, None)        return plaintext.decode()    async def _encrypt_chacha20(self, plaintext: str, key: bytes, operation_id: str) -> str:        """Encrypt using ChaCha20 - Poly1305."""        cipher = ChaCha20Poly1305(key)        nonce = os.urandom(12)  # 96-bit nonce        ciphertext = cipher.encrypt(nonce, plaintext.encode(), None)        # Combine nonce and ciphertext        encrypted_data = base64.b64encode(nonce + ciphertext).decode()        return f"ChaCha20:{encrypted_data}"    async def _decrypt_chacha20(self, encrypted_data: str, key: bytes, operation_id: str) -> str:        """Decrypt using ChaCha20 - Poly1305."""        if not encrypted_data.startswith("ChaCha20:"):            raise ValueError("Invalid ChaCha20 format")        data = base64.b64decode(encrypted_data[9:])  # Remove "ChaCha20:" prefix        nonce = data[:12]        ciphertext = data[12:]        cipher = ChaCha20Poly1305(key)        plaintext = cipher.decrypt(nonce, ciphertext, None)        return plaintext.decode()    async def _encrypt_fernet(self, plaintext: str, key: bytes, operation_id: str) -> str:        """Encrypt using Fernet(fallback)."""        # Derive Fernet key from our key        fernet_key = base64.urlsafe_b64encode(key)        fernet = Fernet(fernet_key)        ciphertext = fernet.encrypt(plaintext.encode())        return f"Fernet:{base64.b64encode(ciphertext).decode()}"    async def _decrypt_fernet(self, encrypted_data: str, key: bytes, operation_id: str) -> str:        """Decrypt using Fernet(fallback)."""        if encrypted_data.startswith("Fernet:"):            data = base64.b64decode(encrypted_data[7:])        else:            # Assume it's raw Fernet data            try:                data = base64.b64decode(encrypted_data)            except (ValueError, TypeError):                data = encrypted_data.encode()        fernet_key = base64.urlsafe_b64encode(key)        fernet = Fernet(fernet_key)        plaintext = fernet.decrypt(data)        return plaintext.decode()    async def _try_fallback_decryption(self, ciphertext: str, key: bytes, operation_id: str) -> str:        """Try different decryption methods as fallback."""        algorithms = [            ("Fernet", self._decrypt_fernet),            ("AES-GCM", self._decrypt_aes_gcm),            ("ChaCha20", self._decrypt_chacha20)        ]        for alg_name, decrypt_func in algorithms:            try:                logger.info(f"Trying fallback decryption with {alg_name} (operation_id: {operation_id})")                return await decrypt_func(ciphertext, key, operation_id)            except Exception as e:                logger.debug(f"Fallback {alg_name} decryption failed: {e}")        raise RuntimeError("All decryption methods failed")    def _looks_like_ciphertext(self, data: str) -> bool:        """Heuristic to determine if data looks like encrypted content."""        # Check for encryption prefixes        if any(data.startswith(prefix) for prefix in ["AES-GCM:", "ChaCha20:", "Fernet:"]):            return True        # Check if it looks like base64        try:            if len(data) > 20 and len(data) % 4 == 0:                base64.b64decode(data)                return True        except (ValueError, TypeError):            pass        return False    async def _log_encryption_event(        self,        event_type: str,        operation_id: str,        message: str,        context: Optional[Dict[str, Any]] = None    ) -> None:        """Log encryption operations for audit purposes."""        try:            details = {                "operation_id": operation_id,                "event_type": event_type,                "algorithm": self.config.algorithm,                "timestamp": datetime.utcnow().isoformat(),                **(context or {})            }            # Determine severity            if "failed" in event_type:                severity = "error"            elif "skipped" in event_type:                severity = "warning"            else:                severity = "info"            await self.audit_integration.log_security_event(                event_type=f"encryption_{event_type}",                severity=severity,                description=message,                details=details            )        except Exception as e:            logger.error(f"Failed to log encryption event: {e}")    def is_available(self) -> bool:        """Check if encryption service is available and operational."""        return self._crypto_available and len(self._encryption_keys) > 0    def get_encryption_status(self) -> Dict[str, Any]:        """Get current encryption service status."""        return {            "available": self.is_available(),            "crypto_available": self._crypto_available,            "keys_loaded": len(self._encryption_keys),            "algorithm": self.config.algorithm,            "key_derivation": self.config.key_derivation,            "operations_performed": len(self._operation_log)        }# Global service instance_encryption_service: Optional[RobustEncryptionService] = Nonedef get_encryption_service(config: Optional[EncryptionConfig] = None) -> RobustEncryptionService:    """Get or create global encryption service instance."""    global _encryption_service    if _encryption_service is None:        _encryption_service = RobustEncryptionService(config)    return _encryption_service# Convenience functions for common operationsasync def encrypt_sensitive_data(    data: str,    policy: EncryptionPolicy = EncryptionPolicy.REQUIRED) -> EncryptionResult:    """Encrypt sensitive data(child information, medical notes, etc.)."""    service = get_encryption_service()    return await service.encrypt(data, policy=policy, context={"data_type": "sensitive"})async def decrypt_sensitive_data(    encrypted_data: str,    policy: EncryptionPolicy = EncryptionPolicy.REQUIRED) -> EncryptionResult:    """Decrypt sensitive data with strict policy enforcement."""    service = get_encryption_service()    return await service.decrypt(encrypted_data, policy=policy, context={"data_type": "sensitive"})

SyntaxError: unterminated triple-quoted string literal (detected at line 1)

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\infrastructure\security\secure_error_handler.py", line 1
    """from dataclasses import dataclassfrom datetime import datetimefrom enum import Enumfrom typing import Dict, Any, Optional, List, Unionimport jsonimport loggingimport reimport secretsfrom fastapi import Request, Response, HTTPException, statusfrom fastapi.exceptions import RequestValidationErrorfrom fastapi.responses import JSONResponsefrom starlette.exceptions import HTTPException as StarletteHTTPExceptionimport tracebackfrom src.infrastructure.security.comprehensive_audit_integration import get_audit_integration"""Secure Error Handler with Information Leak PreventionProvides secure error handling that prevents sensitive information disclosure."""from src.infrastructure.logging_config import get_loggerlogger = get_logger(__name__, component="security")class ErrorSeverity(Enum):    """Error severity levels for security classification."""    LOW = "low"    MEDIUM = "medium"    HIGH = "high"    CRITICAL = "critical"class ErrorCategory(Enum):    """Categories of errors for appropriate handling."""    VALIDATION = "validation"    AUTHENTICATION = "authentication"    AUTHORIZATION = "authorization"    BUSINESS_LOGIC = "business_logic"    INFRASTRUCTURE = "infrastructure"    SECURITY = "security"    CHILD_SAFETY = "child_safety"@dataclassclass ErrorContext:    """Context information for error handling."""    request_id: str    user_id: Optional[str]    child_id: Optional[str]    ip_address: Optional[str]    endpoint: str    method: str    user_agent: Optional[str]    timestamp: datetime@dataclassclass SecureErrorResponse:    """Secure error response with sanitized information."""    error_code: str    message: str    details: Optional[Dict[str, Any]]    request_id: str    timestamp: str    support_reference: Optional[str] = Noneclass SecureErrorHandler:    """    Secure error handler that prevents information leakage while maintaining usability.    Features: - Sanitizes error messages to prevent information disclosure - Logs detailed errors internally while showing safe messages to users - Special handling for child safety violations - Comprehensive audit logging for security incidents - Different error levels based on user types and contexts - Rate limiting for error responses to prevent abuse    """    def __init__(self):        self.audit_integration = get_audit_integration()        self._compile_sensitive_patterns()        self._setup_error_mappings()    def _compile_sensitive_patterns(self) -> None:        """Compile patterns that indicate sensitive information in error messages."""        # Patterns that should never appear in user-facing error messages        self.sensitive_patterns = [            # Database information            re.compile(r'\b(database|sql|query|table|column|constraint)\b', re.IGNORECASE),            re.compile(r'\b(postgresql|mysql|sqlite|mongodb)\b', re.IGNORECASE),            re.compile(r'\b(connection|host|port|username|password)\b', re.IGNORECASE),            # File system information            re.compile(r'[/\\][a-zA-Z0-9_\\-/\\\\.]+', re.IGNORECASE),  # File paths            re.compile(r'\b(directory|folder|file|disk|volume)\b', re.IGNORECASE),            # Network information            re.compile(r'\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\b'),  # IP addresses            re.compile(r'\b[a-zA-Z0-9\\-]+\\.[a-zA-Z]{2,}\b'),  # Domain names            re.compile(r'\b(localhost|127\\.0\\.0\\.1|0\\.0\\.0\\.0)\b', re.IGNORECASE),            # Stack traces and internal references            re.compile(r'\b(traceback|stack|frame|line \\d+)\b', re.IGNORECASE),            re.compile(r'\b(module|function|class|method)\b', re.IGNORECASE),            re.compile(r'src[/\\][a-zA-Z0-9_\\-/\\\\.]+', re.IGNORECASE),            # Cryptographic information            re.compile(r'\b(key|token|secret|hash|cipher|encrypt)\b', re.IGNORECASE),            re.compile(r'\b[A-Za-z0-9+/]{20,}={0,2}\b'),  # Base64 patterns            # System information            re.compile(r'\b(version|python|fastapi|server|application)\b', re.IGNORECASE),            re.compile(r'\b(memory|cpu|process|thread)\b', re.IGNORECASE),            # Personal information patterns            re.compile(r'\b\\d{3}-\\d{2}-\\d{4}\b'),  # SSN            re.compile(r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\b'),  # Email            re.compile(r'\b\\d{3}[\\s-]?\\d{3}[\\s-]?\\d{4}\b'),  # Phone number        ]        # Child-specific sensitive patterns        self.child_sensitive_patterns = [            re.compile(r'\b(child|kid|minor|student|age)\b', re.IGNORECASE),            re.compile(r'\b(parent|guardian|family|school)\b', re.IGNORECASE),            re.compile(r'\b(medical|health|condition|medication)\b', re.IGNORECASE),        ]    def _setup_error_mappings(self) -> None:        """Setup mappings for common error types to secure messages."""        # Standard error mappings        self.error_mappings = {            # Validation errors            "validation_error": "Please check your input and try again.",            "invalid_format": "The provided data format is not valid.",            "missing_field": "Required information is missing.",            "field_too_long": "Input exceeds maximum length.",            "field_too_short": "Input is too short.",            # Authentication errors            "authentication_failed": "Authentication failed. Please try again.",            "invalid_credentials": "Invalid username or password.",            "token_expired": "Your session has expired. Please log in again.",            "token_invalid": "Invalid authentication token.",            "account_locked": "Account is temporarily locked.",            # Authorization errors            "access_denied": "You don't have permission to access this resource.",            "insufficient_permissions": "Insufficient permissions for this action.",            "resource_forbidden": "Access to this resource is not allowed.",            # Business logic errors            "resource_not_found": "The requested resource was not found.",            "conflict": "The operation conflicts with the current state.",            "precondition_failed": "Required conditions are not met.",            "operation_not_allowed": "This operation is not allowed.",            # Infrastructure errors            "service_unavailable": "Service is temporarily unavailable. Please try again later.",            "timeout": "The request timed out. Please try again.",            "rate_limit_exceeded": "Too many requests. Please wait before trying again.",            "internal_error": "An internal error occurred. Please try again later.",            # Security errors            "security_violation": "Security violation detected.",            "suspicious_activity": "Suspicious activity detected.",            "input_rejected": "Input was rejected for security reasons.",            # Child safety errors            "child_safety_violation": "Content is not appropriate for children.",            "parental_consent_required": "Parental consent is required for this action.",            "age_verification_failed": "Age verification is required.",        }        # Child-specific error messages (more gentle)        self.child_error_mappings = {            "validation_error": "Please check what you typed and try again.",            "authentication_failed": "Please ask a grown-up to help you log in.",            "access_denied": "This area is not available right now.",            "rate_limit_exceeded": "Please wait a moment before trying again.",            "child_safety_violation": "That message is not appropriate. Please try something else.",            "internal_error": "Something went wrong. Please ask a grown-up for help.",        }    async def handle_error(        self,        error: Exception,        context: ErrorContext,        error_category: ErrorCategory = ErrorCategory.INFRASTRUCTURE    ) -> SecureErrorResponse:        """        Handle an error securely without leaking sensitive information.        Args: error: The exception that occurred            context: Context information about the request            error_category: Category of the error for appropriate handling        Returns: SecureErrorResponse with sanitized error information        """        try:            # Generate support reference for tracking            support_reference = self._generate_support_reference()            # Determine error severity            severity = self._determine_error_severity(error, error_category)            # Extract safe error information            error_info = self._extract_error_info(error, error_category)            # Create sanitized error message            safe_message = self._create_safe_message(error_info, context, error_category)            # Log detailed error internally            await self._log_detailed_error(error, context, error_info, severity, support_reference)            # Create secure response            response = SecureErrorResponse(                error_code=error_info["code"],                message=safe_message,                details=error_info.get("safe_details"),                request_id=context.request_id,                timestamp=context.timestamp.isoformat(),                support_reference=support_reference if severity in [ErrorSeverity.HIGH, ErrorSeverity.CRITICAL] else None            )            return response        except Exception as handler_error:            logger.critical(f"Error handler failed: {handler_error}")            # Fallback to ultra-safe response            return SecureErrorResponse(                error_code="internal_error",                message="An error occurred. Please try again later.",                details=None,                request_id=context.request_id,                timestamp=datetime.utcnow().isoformat(),                support_reference=self._generate_support_reference()            )    def _extract_error_info(self, error: Exception, category: ErrorCategory) -> Dict[str, Any]:        """Extract safe error information from exception."""        error_type = type(error).__name__        error_message = str(error)        # Sanitize error message        safe_message = self._sanitize_error_message(error_message)        # Determine error code based on exception type and category        if isinstance(error, HTTPException):            status_code = error.status_code            if status_code == 400:                error_code = "validation_error"            elif status_code == 401:                error_code = "authentication_failed"            elif status_code == 403:                error_code = "access_denied"            elif status_code == 404:                error_code = "resource_not_found"            elif status_code == 429:                error_code = "rate_limit_exceeded"            else:                error_code = "http_error"        elif isinstance(error, RequestValidationError):            error_code = "validation_error"        elif "authentication" in error_message.lower():            error_code = "authentication_failed"        elif "permission" in error_message.lower() or "forbidden" in error_message.lower():            error_code = "access_denied"        elif "not found" in error_message.lower():            error_code = "resource_not_found"        elif category == ErrorCategory.CHILD_SAFETY:            error_code = "child_safety_violation"        elif category == ErrorCategory.SECURITY:            error_code = "security_violation"        else:            error_code = "internal_error"        return {            "code": error_code,            "type": error_type,            "original_message": error_message,            "safe_message": safe_message,            "category": category.value,            "safe_details": self._extract_safe_details(error)        }    def _sanitize_error_message(self, message: str) -> str:        """Sanitize error message to remove sensitive information."""        sanitized = message        # Remove sensitive patterns        for pattern in self.sensitive_patterns:            sanitized = pattern.sub("[REDACTED]", sanitized)        # Remove child-sensitive patterns if dealing with child data        for pattern in self.child_sensitive_patterns:            sanitized = pattern.sub("[PROTECTED]", sanitized)        # Remove specific sensitive strings        sensitive_strings = [            "Connection refused",            "Access denied",            "Permission denied",            "No such file or directory",            "Cannot connect to database",            "Authentication failed",            "Invalid token",            "Secret key",            "Configuration error"        ]        for sensitive in sensitive_strings:            sanitized = sanitized.replace(sensitive, "[SYSTEM_ERROR]")        # Truncate if too long        if len(sanitized) > 200:            sanitized = sanitized[:200] + "..."        return sanitized    def _extract_safe_details(self, error: Exception) -> Optional[Dict[str, Any]]:        """Extract safe details that can be shown to users."""        safe_details = {}        # For validation errors, extract field information safely        if isinstance(error, RequestValidationError):            safe_details["validation_errors"] = []            for err in error.errors():                safe_error = {                    "field": ".".join(str(loc) for loc in err.get("loc", [])),                    "type": err.get("type", "unknown"),                    "message": "Invalid value"                }                safe_details["validation_errors"].append(safe_error)        # For HTTP exceptions, include safe status information        elif isinstance(error, HTTPException):            safe_details["status_code"] = error.status_code        return safe_details if safe_details else None    def _create_safe_message(        self,        error_info: Dict[str, Any],        context: ErrorContext,        category: ErrorCategory    ) -> str:        """Create a safe, user - friendly error message."""        error_code = error_info["code"]        # Check if this is a child endpoint        is_child_context = (            context.child_id is not None or            "/children" in context.endpoint or            "/interact" in context.endpoint or            category == ErrorCategory.CHILD_SAFETY        )        # Use child-friendly messages if appropriate        if is_child_context and error_code in self.child_error_mappings:            return self.child_error_mappings[error_code]        # Use standard mappings        if error_code in self.error_mappings:            return self.error_mappings[error_code]        # Fallback based on category        category_messages = {            ErrorCategory.VALIDATION: "Please check your input and try again.",            ErrorCategory.AUTHENTICATION: "Authentication is required.",            ErrorCategory.AUTHORIZATION: "You don't have permission for this action.",            ErrorCategory.BUSINESS_LOGIC: "The requested operation cannot be completed.",            ErrorCategory.INFRASTRUCTURE: "Service is temporarily unavailable.",            ErrorCategory.SECURITY: "Request was rejected for security reasons.",            ErrorCategory.CHILD_SAFETY: "Content is not appropriate for children."        }        return category_messages.get(category, "An error occurred. Please try again later.")    def _determine_error_severity(self, error: Exception, category: ErrorCategory) -> ErrorSeverity:        """Determine the severity level of an error."""        # Critical errors        if category == ErrorCategory.SECURITY:            return ErrorSeverity.CRITICAL        if category == ErrorCategory.CHILD_SAFETY:            return ErrorSeverity.CRITICAL        if "database" in str(error).lower():            return ErrorSeverity.CRITICAL        # High severity errors        if isinstance(error, HTTPException) and error.status_code >= 500:            return ErrorSeverity.HIGH        if "authentication" in str(error).lower():            return ErrorSeverity.HIGH        if "permission" in str(error).lower():            return ErrorSeverity.HIGH        # Medium severity errors        if isinstance(error, RequestValidationError):            return ErrorSeverity.MEDIUM        if isinstance(error, HTTPException) and error.status_code >= 400:            return ErrorSeverity.MEDIUM        # Default to low severity        return ErrorSeverity.LOW    async def _log_detailed_error(        self,        error: Exception,        context: ErrorContext,        error_info: Dict[str, Any],        severity: ErrorSeverity,        support_reference: str    ) -> None:        """Log detailed error information for internal analysis."""        try:            # Create detailed log entry            log_details = {                "support_reference": support_reference,                "error_type": error_info["type"],                "error_code": error_info["code"],                "error_category": error_info["category"],                "original_message": error_info["original_message"],                "endpoint": context.endpoint,                "method": context.method,                "user_id": context.user_id,                "child_id": context.child_id,                "ip_address": context.ip_address,                "user_agent": context.user_agent,                "traceback": traceback.format_exc()            }            # Log using appropriate level            if severity == ErrorSeverity.CRITICAL:                logger.critical(f"Critical error (ref: {support_reference}): {error_info['original_message']}")            elif severity == ErrorSeverity.HIGH:                logger.error(f"High severity error (ref: {support_reference}): {error_info['original_message']}")            elif severity == ErrorSeverity.MEDIUM:                logger.warning(f"Medium severity error (ref: {support_reference}): {error_info['original_message']}")            else:                logger.info(f"Low severity error (ref: {support_reference}): {error_info['original_message']}")            # Audit log for security and child safety errors            if error_info["category"] in ["security", "child_safety"]:                await self.audit_integration.log_security_event(                    event_type=f"error_{error_info['category']}",                    severity=severity.value,                    description=f"Error occurred: {error_info['code']}",                    user_id=context.user_id,                    ip_address=context.ip_address,                    details=log_details                )        except Exception as log_error:            logger.critical(f"Failed to log error details: {log_error}")    def _generate_support_reference(self) -> str:        """Generate a unique support reference for error tracking."""        timestamp = datetime.utcnow().strftime("%Y%m%d")        random_part = secrets.token_hex(4).upper()        return f"ERR-{timestamp}-{random_part}"class SecureErrorMiddleware:    """Middleware that handles all errors securely."""    def __init__(self, app):        self.app = app        self.error_handler = SecureErrorHandler()    async def __call__(self, scope, receive, send):        """Handle requests with secure error handling."""        if scope["type"] != "http":            await self.app(scope, receive, send)            return        try:            await self.app(scope, receive, send)        except Exception as error:            # Create error context            request_id = secrets.token_hex(8)            context = ErrorContext(                request_id=request_id,                user_id=None,  # Would be extracted from request if available                child_id=None,  # Would be extracted from request if available                ip_address=scope.get("client", ["unknown"])[0] if scope.get("client") else "unknown",                endpoint=scope.get("path", "/unknown"),                method=scope.get("method", "UNKNOWN"),                user_agent=next((h[1].decode() for h in scope.get("headers", []) if h[0] == b"user-agent"), None),                timestamp=datetime.utcnow()            )            # Handle error securely            secure_response = await self.error_handler.handle_error(error, context)            # Send secure error response            response = {                "type": "http.response.start",                "status": 500,                "headers": [                    [b"content-type", b"application/json"],                    [b"x-request-id", request_id.encode()],                ],            }            await send(response)            body = json.dumps({                "error": secure_response.error_code,                "message": secure_response.message,                "request_id": secure_response.request_id,                "timestamp": secure_response.timestamp,                "support_reference": secure_response.support_reference            }).encode()            await send({                "type": "http.response.body",                "body": body,            })# Global error handler instance_error_handler: Optional[SecureErrorHandler] = Nonedef get_error_handler() -> SecureErrorHandler:    """Get global secure error handler instance."""    global _error_handler    if _error_handler is None:        _error_handler = SecureErrorHandler()    return _error_handler# Convenience functions for common error handlingasync def handle_validation_error(error: RequestValidationError, context: ErrorContext) -> SecureErrorResponse:    """Handle validation errors securely."""    handler = get_error_handler()    return await handler.handle_error(error, context, ErrorCategory.VALIDATION)async def handle_security_error(error: Exception, context: ErrorContext) -> SecureErrorResponse:    """Handle security errors with maximum protection."""    handler = get_error_handler()    return await handler.handle_error(error, context, ErrorCategory.SECURITY)async def handle_child_safety_error(error: Exception, context: ErrorContext) -> SecureErrorResponse:    """Handle child safety errors with special care."""    handler = get_error_handler()    return await handler.handle_error(error, context, ErrorCategory.CHILD_SAFETY)

SyntaxError: unterminated triple-quoted string literal (detected at line 1)

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\infrastructure\security\security_headers_middleware.py", line 175
    """
    ^
SyntaxError: unterminated triple-quoted string literal (detected at line 218)

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\infrastructure\security\security_headers_service.py", line 333
    child_age: Child's age for age-appropriate headers
                    ^
SyntaxError: unterminated string literal (detected at line 333)

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\infrastructure\security\security_middleware.py", line 302
    """إنشاء middleware الأمان"""
                              ^
SyntaxError: unterminated triple-quoted string literal (detected at line 318)

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\infrastructure\security\sql_injection_protection.py", line 108
    """Get or create SQL injection protection instance"""
                                                      ^
SyntaxError: unterminated triple-quoted string literal (detected at line 117)

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\infrastructure\security\hardening\coppa_compliance.py", line 1
    """from datetime import datetime, timedeltafrom typing import Dict, List, Any, Optionalimport loggingfrom src.infrastructure.security.coppa import ("""Production COPPA Compliance Module - LEGACY COMPATIBILITY FILEEnterprise - grade COPPA compliance with encryption, audit trails, and comprehensive data protection.NOTE: This file maintains backward compatibility. New modular structureis in src / infrastructure / security / coppa / package"""    ChildData,    ParentConsent,    DataRetentionPolicy,    AuditLogEntry,    DataDeletionRequest,    DataRetentionManager,    ConsentManager,    get_retention_manager,    get_consent_manager)from src.infrastructure.logging_config import get_loggerlogger = get_logger(__name__, component="security")class COPPACompliance:    """    Legacy COPPA compliance service for backward compatibility    This class wraps the new modular components to maintain    compatibility with existing code.    """    def __init__(self) -> None:        self.retention_manager = get_retention_manager()        self.consent_manager = get_consent_manager()        logger.info("COPPA Compliance service initialized (legacy wrapper)")    async def validate_child_age(self, age: int) -> Dict[str, Any]:        """Legacy method for child age validation"""        try:            compliant = age <= 13            return {                "compliant": compliant,                "age": age,                "requires_consent": compliant,                "max_age": 13            }        except Exception as e:            logger.error(f"Age validation failed: {e}")            return {"compliant": False, "error": str(e)}    async def validate_parental_consent(self, consent_data: Dict[str, Any]) -> Dict[str, Any]:        """Legacy method for consent validation"""        try:            required_fields = ["parent_name", "parent_email", "child_name", "child_age"]            missing_fields = [field for field in required_fields if field not in consent_data]            if missing_fields:                return {                    "valid": False,                    "missing_fields": missing_fields,                    "error": "Required fields missing"                }            return {"valid": True, "consent_verified": True}        except Exception as e:            logger.error(f"Consent validation failed: {e}")            return {"valid": False, "error": str(e)}    def create_data_retention_policy(self, child_data: ChildData) -> Dict[str, Any]:        """Legacy method for creating retention policy"""        try:            retention_days = 90  # Default COPPA retention            return {                "retention_period_days": retention_days,                "auto_delete_enabled": True,                "scheduled_deletion": (datetime.utcnow() + timedelta(days=retention_days)).isoformat(),                "compliance_mode": "coppa"            }        except Exception as e:            logger.error(f"Failed to create retention policy: {e}")            return {"error": str(e)}    def audit_compliance(self) -> Dict[str, Any]:        """Legacy method for compliance audit"""        try:            return {                "compliance_status": "compliant",                "last_audit": datetime.utcnow().isoformat(),                "issues_found": 0,                "recommendations": []            }        except Exception as e:            logger.error(f"Compliance audit failed: {e}")            return {"compliance_status": "error", "error": str(e)}# Legacy factory functiondef get_coppa_compliance() -> COPPACompliance:    """Get COPPA compliance service instance"""    return COPPACompliance()# Export for backward compatibility__all__ = [    "COPPACompliance",    "ChildData",    "ParentConsent",    "DataRetentionPolicy",    "get_coppa_compliance",    "get_retention_manager",    "get_consent_manager"]

SyntaxError: unterminated triple-quoted string literal (detected at line 1)

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\infrastructure\security\hardening\csrf_protection.py", line 1
    """from dataclasses import dataclassfrom datetime import datetime, timedeltafrom typing import Dict, Optional, Setimport hashlibimport loggingimport secretsimport timefrom fastapi import HTTPException, Request, Responsefrom fastapi.security.utils import get_authorization_scheme_paramimport hmac"""CSRF Protection for AI Teddy BearComprehensive Cross - Site Request Forgery protection with token - based validation"""from src.infrastructure.logging_config import get_loggerlogger = get_logger(__name__, component="security")@dataclassclass CSRFConfig:    """Configuration for CSRF protection"""    secret_key: str    token_lifetime: int = 3600  # 1 hour    cookie_name: str = "csrf_token"    header_name: str = "X-CSRF-Token"    safe_methods: Set[str] = None    require_https: bool = True    same_site: str = "Strict"  # "Strict", "Lax", "None"    def __post_init__(self):        if self.safe_methods is None:            self.safe_methods = {"GET", "HEAD", "OPTIONS", "TRACE"}class CSRFTokenManager:    """    Manages CSRF token generation, validation, and storage    Implements double - submit cookie pattern with cryptographic validation    """    def __init__(self, config: CSRFConfig) -> None:        self.config = config        self.token_cache: Dict[str, Dict] = {}  # In-memory cache for tokens        if not config.secret_key or len(config.secret_key) < 32:            raise ValueError("CSRF secret key must be at least 32 characters long")    def generate_token(self, session_id: str, user_id: str = None) -> str:        """        Generate a cryptographically secure CSRF token        Args: session_id: User session identifier            user_id: Optional user identifier for additional security        Returns: Base64 - encoded CSRF token        """        try:            # Create timestamp            timestamp = str(int(time.time()))            # Create random component            random_bytes = secrets.token_bytes(16)            # Combine components            token_data = f"{session_id}:{user_id or 'anonymous'}:{timestamp}"            # Create HMAC signature            signature = hmac.new(                self.config.secret_key.encode(),                token_data.encode() + random_bytes,                hashlib.sha256            ).hexdigest()            # Combine all components            full_token = f"{timestamp}.{secrets.token_urlsafe(16)}.{signature[:16]}"            # Cache token for validation            self.token_cache[full_token] = {                "session_id": session_id,                "user_id": user_id,                "created_at": int(time.time()),                "expires_at": int(time.time()) + self.config.token_lifetime            }            # Clean expired tokens periodically            self._cleanup_expired_tokens()            logger.debug(f"Generated CSRF token for session {session_id}")            return full_token        except Exception as e:            logger.error(f"Failed to generate CSRF token: {e}")            raise    def validate_token(        self,        token: str,        session_id: str,        user_id: str = None    ) -> bool:        """        Validate CSRF token against session and user        Args: token: CSRF token to validate            session_id: Current session identifier            user_id: Current user identifier        Returns: True if token is valid, False otherwise        """        try:            if not token:                logger.warning("Empty CSRF token provided")                return False            # Check if token exists in cache            if token not in self.token_cache:                logger.warning(f"CSRF token not found in cache: {token[:16]}...")                return False            token_data = self.token_cache[token]            # Check expiration            if int(time.time()) > token_data["expires_at"]:                logger.warning(f"Expired CSRF token: {token[:16]}...")                del self.token_cache[token]                return False            # Validate session match            if token_data["session_id"] != session_id:                logger.warning(f"CSRF token session mismatch: {token[:16]}...")                return False            # Validate user match (if provided)            if user_id and token_data["user_id"] != user_id:                logger.warning(f"CSRF token user mismatch: {token[:16]}...")                return False            logger.debug(f"CSRF token validated successfully: {token[:16]}...")            return True        except Exception as e:            logger.error(f"CSRF token validation error: {e}")            return False    def invalidate_token(self, token: str) -> bool:        """        Invalidate a specific CSRF token        Args: token: Token to invalidate        Returns: True if token was found and invalidated        """        try:            if token in self.token_cache:                del self.token_cache[token]                logger.debug(f"Invalidated CSRF token: {token[:16]}...")                return True            return False        except Exception as e:            logger.error(f"Failed to invalidate CSRF token: {e}")            return False    def invalidate_session_tokens(self, session_id: str) -> int:        """        Invalidate all tokens for a specific session        Args: session_id: Session to invalidate tokens for Returns: Number of tokens invalidated        """        try:            tokens_to_remove = [                token for token, data in self.token_cache.items()                if data["session_id"] == session_id            ]            for token in tokens_to_remove:                del self.token_cache[token]            logger.info(f"Invalidated {len(tokens_to_remove)} CSRF tokens for session {session_id}")            return len(tokens_to_remove)        except Exception as e:            logger.error(f"Failed to invalidate session tokens: {e}")            return 0    def _cleanup_expired_tokens(self) -> None:        """Remove expired tokens from cache"""        try:            current_time = int(time.time())            expired_tokens = [                token for token, data in self.token_cache.items()                if current_time > data["expires_at"]            ]            for token in expired_tokens:                del self.token_cache[token]            if expired_tokens:                logger.debug(f"Cleaned up {len(expired_tokens)} expired CSRF tokens")        except Exception as e:            logger.error(f"Failed to cleanup expired tokens: {e}")    def get_token_stats(self) -> Dict[str, int]:        """Get statistics about current tokens"""        try:            current_time = int(time.time())            active_tokens = sum(                1 for data in self.token_cache.values()                if current_time <= data["expires_at"]            )            expired_tokens = len(self.token_cache) - active_tokens            return {                "total_tokens": len(self.token_cache),                "active_tokens": active_tokens,                "expired_tokens": expired_tokens            }        except Exception as e:            logger.error(f"Failed to get token stats: {e}")            return {}class CSRFProtection:    """    Main CSRF protection class Provides middleware and utilities for CSRF protection    """    def __init__(self, config: CSRFConfig) -> None:        self.config = config        self.token_manager = CSRFTokenManager(config)    def generate_token_for_request(self, request: Request) -> str:        """Generate CSRF token for current request"""        session_id = self._get_session_id(request)        user_id = self._get_user_id(request)        return self.token_manager.generate_token(session_id, user_id)    def validate_request(self, request: Request) -> bool:        """        Validate CSRF protection for request        Args: request: FastAPI request object        Returns: True if request is valid or doesn't require CSRF protection        """        try:            # Skip CSRF for safe methods            if request.method in self.config.safe_methods:                return True            # Get session and user information            session_id = self._get_session_id(request)            user_id = self._get_user_id(request)            # Get CSRF token from header or form data            csrf_token = self._get_csrf_token_from_request(request)            if not csrf_token:                logger.warning(f"Missing CSRF token for {request.method} {request.url.path}")                return False            # Validate token            is_valid = self.token_manager.validate_token(csrf_token, session_id, user_id)            if not is_valid:                logger.warning(                    f"Invalid CSRF token for {request.method} {request.url.path} "                    f"from {request.client.host if request.client else 'unknown'}"                )            return is_valid        except Exception as e:            logger.error(f"CSRF validation error: {e}")            return False    def set_csrf_cookie(self, response: Response, token: str) -> None:        """Set CSRF token as HTTP-only cookie"""        try:            response.set_cookie(                key=self.config.cookie_name,                value=token,                max_age=self.config.token_lifetime,                httponly=True,                secure=self.config.require_https,                samesite=self.config.same_site            )        except Exception as e:            logger.error(f"Failed to set CSRF cookie: {e}")    def _get_session_id(self, request: Request) -> str:        """Extract session ID from request"""        # Try to get from session cookie or generate one        session_id = request.cookies.get("session_id")        if not session_id:            # Generate temporary session ID based on client info            client_info = f"{request.client.host if request.client else 'unknown'}"            session_id = hashlib.sha256(client_info.encode()).hexdigest()[:16]        return session_id    def _get_user_id(self, request: Request) -> Optional[str]:        """Extract user ID from request(if authenticated)"""        try:            # Try to get from request state (set by auth middleware)            user = getattr(request.state, "user", None)            if user and isinstance(user, dict):                return user.get("user_id")            return None        except Exception as e:            logger.debug(f"Could not extract user ID: {e}")            return None    def _get_csrf_token_from_request(self, request: Request) -> Optional[str]:        """Extract CSRF token from request headers or form data"""        try:            # Try header first            token = request.headers.get(self.config.header_name)            if token:                return token            # Try cookie (for double-submit pattern)            token = request.cookies.get(self.config.cookie_name)            if token:                return token            return None        except Exception as e:            logger.error(f"Failed to extract CSRF token: {e}")            return None# Middleware for automatic CSRF protectionclass CSRFMiddleware:    """    ASGI middleware for automatic CSRF protection    """    def __init__(self, app, config: CSRFConfig) -> None:        self.app = app        self.csrf_protection = CSRFProtection(config)    async def __call__(self, scope, receive, send):        if scope["type"] == "http":            request = Request(scope, receive)            # Validate CSRF for unsafe methods            if not self.csrf_protection.validate_request(request):                # Return 403 Forbidden                response = Response(                    content="CSRF token validation failed",                    status_code=403,                    headers={"Content-Type": "text/plain"}                )                await response(scope, receive, send)                return        # Continue with the application        await self.app(scope, receive, send)# Global CSRF protection instance_csrf_protection: Optional[CSRFProtection] = Nonedef get_csrf_protection() -> CSRFProtection:    """Get global CSRF protection instance"""    global _csrf_protection    if _csrf_protection is None:        # Default configuration - should be overridden in production        config = CSRFConfig(            secret_key=secrets.token_urlsafe(32),            require_https=False  # Set to True in production        )        _csrf_protection = CSRFProtection(config)        logger.warning("Using default CSRF configuration - configure properly for production")    return _csrf_protectiondef init_csrf_protection(secret_key: str, **kwargs) -> CSRFProtection:    """Initialize CSRF protection with custom configuration"""    global _csrf_protection    config = CSRFConfig(secret_key=secret_key, **kwargs)    _csrf_protection = CSRFProtection(config)    logger.info("CSRF protection initialized with custom configuration")    return _csrf_protection# Decorator for protecting individual endpointsdef csrf_protect(func):    """Decorator to add CSRF protection to individual endpoints"""    async def wrapper(*args, **kwargs):        # Find request object in arguments        request = None        for arg in args:            if isinstance(arg, Request):                request = arg                break        if not request:            raise HTTPException(                status_code=500,                detail="CSRF protection requires Request object"            )        # Validate CSRF        csrf = get_csrf_protection()        if not csrf.validate_request(request):            raise HTTPException(                status_code=403,                detail="CSRF token validation failed"            )        return await func(*args, **kwargs)    return wrapper

SyntaxError: unterminated string literal (detected at line 1)

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\infrastructure\security\hardening\input_validation.py", line 1
    """import warningsfrom .validation import ("""Input Validation Middleware for AI Teddy BearRefactored to be under 300 lines by extracting componentsTranslated Arabic comments to EnglishThis file now serves as a facade that re - exports functionality from modular components.The actual implementation is split across: - validation / validation_config.py: Configuration classes and enums - validation / validation_rules.py: Validation rules and patterns - validation / sanitizer.py: Input sanitization logic - validation / middleware.py: ASGI middleware implementation"""    InputValidationConfig,    ValidationRule,    ValidationSeverity,    InputSanitizer,    InputValidationMiddleware,    create_input_validation_middleware)# Re-export for backward compatibility__all__ = [    "InputValidationConfig",    "ValidationRule",    "ValidationSeverity",    "InputSanitizer",    "InputValidationMiddleware",    "create_input_validation_middleware"]# Deprecation warning for direct importswarnings.warn(    "Importing from input_validation.py is deprecated. "    "Please import from src.infrastructure.security.hardening.validation instead.",    DeprecationWarning,    stacklevel=2)# Implements pattern-based validation, content filtering, and sanitization# Provides special protections for child users with COPPA compliance

SyntaxError: unterminated triple-quoted string literal (detected at line 1)

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\infrastructure\security\hardening\__init__.py", line 1
    """from .rate_limiter import ("""Security Hardening Components for AI Teddy BearComprehensive security hardening package with enterprise - grade protections"""    RedisRateLimiter,    ChildSafetyRateLimiter,    RateLimitConfig,    RateLimitResult,    get_rate_limiter,    get_child_safety_limiter)from .csrf_protection import (    CSRFProtection,    CSRFTokenManager,    CSRFConfig,    CSRFMiddleware,    get_csrf_protection,    init_csrf_protection,    csrf_protect)from .security_headers import (    SecurityHeadersMiddleware,    SecurityHeadersConfig,    SecurityValidator,    get_security_headers_config,    init_security_headers,    create_security_headers_middleware)from .input_validation import (    InputValidationMiddleware,    InputSanitizer,    InputValidationConfig,    ValidationRule,    ValidationSeverity,    create_input_validation_middleware)__all__ = [    # Rate Limiting    "RedisRateLimiter",    "ChildSafetyRateLimiter",    "RateLimitConfig",    "RateLimitResult",    "get_rate_limiter",    "get_child_safety_limiter",    # CSRF Protection    "CSRFProtection",    "CSRFTokenManager",    "CSRFConfig",    "CSRFMiddleware",    "get_csrf_protection",    "init_csrf_protection",    "csrf_protect",    # Security Headers    "SecurityHeadersMiddleware",    "SecurityHeadersConfig",    "SecurityValidator",    "get_security_headers_config",    "init_security_headers",    "create_security_headers_middleware",    # Input Validation    "InputValidationMiddleware",    "InputSanitizer",    "InputValidationConfig",    "ValidationRule",    "ValidationSeverity",    "create_input_validation_middleware"]# Package version__version__ = "1.0.0"
                                                                                                                                                                ^
SyntaxError: unterminated triple-quoted string literal (detected at line 1)

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\infrastructure\security\hardening\security_tests\injection_tests.py", line 54
    (r'execute\s*\(.*\s*f['"].*SELECT.*', "f-string in SQL query"),
                                                                ^
SyntaxError: unterminated string literal (detected at line 54)

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\infrastructure\security\hardening\validation\middleware.py", line 1
    """import jsonimport loggingfrom fastapi import HTTPException, Requestfrom .sanitizer import InputSanitizerfrom .validation_config import InputValidationConfig"""Input Validation ASGI MiddlewareExtracted from input_validation.py to reduce file size"""from src.infrastructure.logging_config import get_loggerlogger = get_logger(__name__, component="security")class InputValidationMiddleware:    """    ASGI middleware for input validation and sanitization    """    def __init__(self, app, config: InputValidationConfig = None) -> None:        self.app = app        self.config = config or InputValidationConfig()        self.sanitizer = InputSanitizer(self.config)        logger.info("Input validation middleware initialized")    async def __call__(self, scope, receive, send):        if scope["type"] == "http":            request = Request(scope, receive)            # Skip validation for safe methods or specific paths            if request.method in ["GET", "HEAD", "OPTIONS"]:                await self.app(scope, receive, send)                return            # Validate request body            try:                body = await request.body()                if body:                    validated_body = await self._validate_request_body(                        body, request                    )                    # Replace request body with validated version                    scope["body"] = validated_body            except HTTPException:                # Forward validation errors                raise            except Exception as e:                logger.error(f"Input validation error: {e}")                raise HTTPException(                    status_code=400,                    detail="Request validation failed"                )        await self.app(scope, receive, send)    async def _validate_request_body(self, body: bytes, request: Request) -> bytes:        """Validate and sanitize request body"""        try:            # Determine if this is child input            is_child_input = self._is_child_request(request)            # Check body size            max_size = self.config.max_json_size            if len(body) > max_size:                raise HTTPException(                    status_code=413,                    detail=f"Request body too large (max {max_size} bytes)"                )            # Try to parse as JSON            try:                data = json.loads(body.decode('utf-8'))                # Sanitize JSON data                result = self.sanitizer.sanitize_json(data, is_child_input)                # Check if sanitization was successful                if not result["is_safe"]:                    critical_violations = [                        v for v in result["violations"]                        if v["severity"] == "critical"                    ]                    if critical_violations:                        logger.error(                            f"Critical input validation violations: "                            f"{[v['message'] for v in critical_violations]}"                        )                        raise HTTPException(                            status_code=400,                            detail="Input contains unsafe content"                        )                # Return sanitized data                return json.dumps(result["sanitized"]).encode('utf-8')            except json.JSONDecodeError:                # Not JSON, treat as plain text                text = body.decode('utf-8')                result = self.sanitizer.sanitize_string(                    text, is_child_input, "request_body"                )                if not result["is_safe"]:                    critical_violations = [                        v for v in result["violations"]                        if v["severity"] == "critical"                    ]                    if critical_violations:                        raise HTTPException(                            status_code=400,                            detail="Input contains unsafe content"                        )                return result["sanitized"].encode('utf-8')        except HTTPException:            raise        except Exception as e:            logger.error(f"Error validating request body: {e}")            raise HTTPException(                status_code=400,                detail="Request validation failed"            )    def _is_child_request(self, request: Request) -> bool:        """Determine if request comes from child user"""        try:            # Check user role from authentication            user = getattr(request.state, "user", None)            if user and isinstance(user, dict):                return user.get("role") == "child"            # Check for child-specific endpoints            child_endpoints = ["/process-audio", "/children/", "/story/"]            return any(endpoint in request.url.path for endpoint in child_endpoints)        except (AttributeError, ValueError) as e:            logger.warning(f"Error determining if request is child-related: {e}")            # Default to child input for safety            return True        except Exception as e:            logger.error(f"Unexpected error in child endpoint detection: {e}")            # Default to child input for safety            return True# Factory functiondef create_input_validation_middleware(    child_safety_mode: bool = True,    **kwargs) -> InputValidationMiddleware:    """Create input validation middleware with custom configuration"""    config = InputValidationConfig(**kwargs)    if child_safety_mode:        # More restrictive settings for child safety        config.max_string_length = min(config.max_string_length, 5000)        config.max_array_length = min(config.max_array_length, 500)        config.enable_profanity_filter = True        config.enable_personal_info_detection = True    return InputValidationMiddleware(None, config)

SyntaxError: unterminated triple-quoted string literal (detected at line 1)

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\infrastructure\security\hardening\validation\__init__.py", line 1
    """from .middleware import InputValidationMiddleware, create_input_validation_middlewarefrom .sanitizer import InputSanitizerfrom .validation_config import InputValidationConfig, ValidationRule, ValidationSeverity"""Input Validation ModuleExtracted from input_validation.py to reduce file size"""__all__ = [    "InputValidationConfig",    "ValidationRule",    "ValidationSeverity",    "InputSanitizer",    "InputValidationMiddleware",    "create_input_validation_middleware"]
                                                                                                                                                                                                                                                                                                         ^
SyntaxError: unterminated triple-quoted string literal (detected at line 1)

Sorry: IndentationError: unexpected indent (__init__.py, line 14)
  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\infrastructure\security\tests\test_path_traversal_fixes.py", line 280
    """Test that validation is fast enough for production"""
                                                         ^
SyntaxError: unterminated triple-quoted string literal (detected at line 307)

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\infrastructure\security\validation\input_sanitizer.py", line 10
    🔒 Input Sanitization Service
    ^
SyntaxError: invalid character '🔒' (U+1F512)

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\infrastructure\security\validation\query_validator.py", line 9
    🔒 SQL Query Validation Service
    ^
SyntaxError: invalid character '🔒' (U+1F512)

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\infrastructure\security\validation\__init__.py", line 8
    """
    ^
SyntaxError: unterminated triple-quoted string literal (detected at line 17)

Sorry: IndentationError: unexpected indent (comprehensive_input_validator.py, line 18)
  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\infrastructure\validation\validation_types.py", line 98
    r"\.\./|\.\.\\/|/\.\./|\\\.\.\\\",
    ^
SyntaxError: unterminated string literal (detected at line 98); perhaps you escaped the end quote?

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\presentation\api\error_handlers.py", line 242
    """
    ^
SyntaxError: unterminated triple-quoted string literal (detected at line 256)

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\presentation\api\esp32_endpoints.py", line 189
    """Get device configuration"""
                               ^
SyntaxError: unterminated triple-quoted string literal (detected at line 199)

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\presentation\api\health_endpoints.py", line 271
    """
    ^
SyntaxError: unterminated triple-quoted string literal (detected at line 320)

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\presentation\api\parental_dashboard.py", line 339
    )
     ^
SyntaxError: expected 'except' or 'finally' block

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\presentation\api\emergency_response\__init__.py", line 17
    """Emergency Response Module - Modular emergency system components"""
                                                                      ^
SyntaxError: unterminated triple-quoted string literal (detected at line 30)

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\presentation\api\endpoints\audio.py", line 47
    summary="Transcribe audio input and return a
            ^
SyntaxError: unterminated string literal (detected at line 47)

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\presentation\api\endpoints\chatgpt.py", line 22
    from src.application.services.ai_orchestration_service import AIOrchestrationService
    ^^^^
SyntaxError: expected 'except' or 'finally' block

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\presentation\api\endpoints\device.py", line 12
    🧸 Device Management Endpoints
    ^
SyntaxError: invalid character '🧸' (U+1F9F8)

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\presentation\api\endpoints\example_simplified.py", line 141
    """
    ^
SyntaxError: unterminated triple-quoted string literal (detected at line 147)

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\presentation\api\endpoints\monitoring_dashboard.py", line 380
    """Get active alerts with optional severity filter."""
                                                       ^
SyntaxError: unterminated triple-quoted string literal (detected at line 415)

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\presentation\api\endpoints\auth\routes_di.py", line 254
    """Validate JWT token and return payload."""
                                             ^
SyntaxError: unterminated triple-quoted string literal (detected at line 275)

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\presentation\api\middleware\child_safe_rate_limiter.py", line 102
    """Create standard rate limit response."""
                                           ^
SyntaxError: unterminated triple-quoted string literal (detected at line 116)

Sorry: IndentationError: unexpected indent (error_handling.py, line 19)
Sorry: IndentationError: unexpected indent (exception_handler.py, line 14)
  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\presentation\api\middleware\rate_limit_middleware.py", line 282
    """Factory function to create rate limiting middleware."""
                                                           ^
SyntaxError: unterminated triple-quoted string literal (detected at line 303)

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\presentation\api\middleware\security_headers.py", line 12
    """
    ^
SyntaxError: unterminated triple-quoted string literal (detected at line 18)

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\presentation\api\middleware\__init__.py", line 7
    """
    ^
SyntaxError: unterminated triple-quoted string literal (detected at line 20)

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\presentation\api\middleware\security\security_headers_middleware.py", line 184
    """
    ^
SyntaxError: unterminated triple-quoted string literal (detected at line 191)

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\presentation\api\middleware\security_headers\csp_policies.py", line 52
    """Get Permissions Policy for child safety."""
                                               ^
SyntaxError: unterminated triple-quoted string literal (detected at line 65)

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\presentation\api\middleware\security_headers\header_builder.py", line 5
    """Security Headers Builder
       ^^^^^^^^
SyntaxError: invalid syntax

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\presentation\api\middleware\security_headers\__init__.py", line 9
    """
    ^
SyntaxError: unterminated triple-quoted string literal (detected at line 19)

  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\presentation\api\websocket\__init__.py", line 1
    """WebSocket Package"""from .handlers import router as websocket_routerfrom .manager import WebSocketManager"""WebSocket Package"""__all__ = ["WebSocketManager", "websocket_router"]
                           ^^^^
SyntaxError: invalid syntax

Sorry: IndentationError: unexpected indent (rate_limiting.py, line 15)
  File "C:\Users\jaafa\Desktop\5555\ai-teddy\ai-tiddy-bear--main\src\utils\file_validators.py", line 9
    import "audio/flac"
    ^^^^^^
SyntaxError: invalid syntax
