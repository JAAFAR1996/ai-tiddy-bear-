"""from datetime import datetimefrom typing import Dict, Anyimport loggingfrom .authentication_tests import AuthenticationTesterfrom .compliance_tests import ComplianceTesterfrom .encryption_tests import EncryptionTesterfrom .injection_tests import InjectionTester"""Main Security Tester Class"""from src.infrastructure.logging_config import get_loggerlogger = get_logger(__name__, component="security")class SecurityTester:    """Main security testing orchestrator"""    def __init__(self, base_path: str = ".") -> None:        self.base_path = base_path        self.injection_tester = InjectionTester(base_path)        self.auth_tester = AuthenticationTester(base_path)        self.encryption_tester = EncryptionTester(base_path)        self.compliance_tester = ComplianceTester(base_path)    def run_all_security_tests(self) -> Dict[str, Any]:        """Run all security tests"""        logger.info("🔒 Starting comprehensive security tests...")        results = {            "test_date": datetime.now().isoformat(),            "total_tests": 0,            "passed_tests": 0,            "failed_tests": 0,            "test_results": []        }        # Define all tests        tests = [            ("Code Injection", self.injection_tester.test_code_injection),            ("SQL Injection", self.injection_tester.test_sql_injection),            ("XSS Vulnerabilities", self.injection_tester.test_xss_vulnerabilities),            ("Path Traversal", self.injection_tester.test_path_traversal),            ("Authentication", self.auth_tester.test_authentication),            ("Input Validation", self.auth_tester.test_input_validation),            ("Rate Limiting", self.auth_tester.test_rate_limiting),            ("Encryption", self.encryption_tester.test_encryption),            ("Secrets Exposure", self.encryption_tester.test_secrets_exposure),            ("COPPA Compliance", self.compliance_tester.test_coppa_compliance),            ("GDPR Compliance", self.compliance_tester.test_gdpr_compliance),            ("Security Headers", self.compliance_tester.test_security_headers)        ]        # Run each test        for test_name, test_func in tests:            try:                test_result = test_func()                test_result["test_name"] = test_name                results["test_results"].append(test_result)                results["total_tests"] += 1                if test_result["passed"]:                    results["passed_tests"] += 1                else:                    results["failed_tests"] += 1            except Exception as e:                logger.error(f"Test {test_name} failed with error: {e}")                results["test_results"].append({                    "test_name": test_name,                    "passed": False,                    "issues": [f"Test execution failed: {str(e)}"],                    "recommendations": ["Fix test execution error"]                })                results["total_tests"] += 1                results["failed_tests"] += 1        # Calculate pass rate        if results["total_tests"] > 0:            results["pass_rate"] = (results["passed_tests"] / results["total_tests"]) * 100        else:            results["pass_rate"] = 0        logger.info(f"✅ Security tests completed. Pass rate: {results['pass_rate']:.1f}%")        return results    def generate_security_report(self) -> str:        """Generate comprehensive security report"""        test_results = self.run_all_security_tests()        report = f"""# 🔒 AI Teddy Bear Security Test Report**Test Date:** {test_results['test_date']}**Total Tests:** {test_results['total_tests']}**Passed:** {test_results['passed_tests']}**Failed:** {test_results['failed_tests']}**Pass Rate:** {test_results['pass_rate']:.1f}%## Test Results Summary"""        for result in test_results['test_results']:            status = "✅ PASSED" if result['passed'] else "❌ FAILED"            report += f"### {result['test_name']} - {status}\n\n"            if result['issues']:                report += "**Issues Found:**\n"                for issue in result['issues']:                    report += f"- {issue}\n"                report += "\n"            if result['recommendations']:                report += "**Recommendations:**\n"                for rec in result['recommendations']:                    report += f"- {rec}\n"                report += "\n"        return report