"""from datetime import datetime, timezonefrom typing import Optional, Dict, Any, Listimport uuidfrom sqlalchemy import ("""Conversation and Message ModelsEnterprise-grade models for conversation tracking and analysis"""    Column, String, DateTime, Boolean, Integer, Float,    ForeignKey, Text, Index)from sqlalchemy.dialects.postgresql import UUID, JSONBfrom sqlalchemy.orm import relationship, Mapped, mapped_columnfrom src.infrastructure.persistence.models.base import Baseclass ConversationModel(Base):    """Conversation model with comprehensive tracking and analysis."""    __tablename__ = "conversations"    # Primary key    id: Mapped[str] = mapped_column(        UUID(as_uuid=False),        primary_key=True,        default=lambda: str(uuid.uuid4())    )    # Relationships    child_id: Mapped[str] = mapped_column(        UUID(as_uuid=False),        ForeignKey("children.id", ondelete="CASCADE"),        nullable=False,        index=True    )    # Session information    session_id: Mapped[str] = mapped_column(String(36), nullable=False, index=True)    conversation_type: Mapped[str] = mapped_column(String(20), default="chat")    # Timing    start_time: Mapped[datetime] = mapped_column(        DateTime(timezone=True),        default=lambda: datetime.now(timezone.utc),        nullable=False    )    end_time: Mapped[Optional[datetime]] = mapped_column(DateTime(timezone=True))    duration_seconds: Mapped[Optional[int]] = mapped_column(Integer)    # Content summary    summary: Mapped[str] = mapped_column(Text, default="")    message_count: Mapped[int] = mapped_column(Integer, default=0)    # AI Analysis    emotion_analysis: Mapped[str] = mapped_column(String(50), default="neutral")    sentiment_score: Mapped[float] = mapped_column(Float, default=0.0)    engagement_level: Mapped[str] = mapped_column(String(20), default="medium")    # Safety metrics    safety_flags: Mapped[int] = mapped_column(Integer, default=0)    content_warnings: Mapped[dict] = mapped_column(JSONB, default=dict)    moderation_actions: Mapped[dict] = mapped_column(JSONB, default=dict)    # Quality metrics    response_quality: Mapped[float] = mapped_column(Float, default=0.0)    age_appropriateness: Mapped[float] = mapped_column(Float, default=1.0)    educational_value: Mapped[float] = mapped_column(Float, default=0.0)    # Relationships    child: Mapped["ChildModel"] = relationship("ChildModel", back_populates="conversations")    messages: Mapped[List["MessageModel"]] = relationship(        "MessageModel",        back_populates="conversation",        cascade="all, delete-orphan"    )    # Indexes    __table_args__ = (        Index("idx_conversation_child_time", "child_id", "start_time"),        Index("idx_conversation_session", "session_id"),        Index("idx_conversation_type_time", "conversation_type", "start_time"),    )    def to_dict(self) -> Dict[str, Any]:        """Convert model to dictionary for API responses."""        return {            "id": self.id,            "child_id": self.child_id,            "session_id": self.session_id,            "conversation_type": self.conversation_type,            "start_time": self.start_time.isoformat(),            "end_time": self.end_time.isoformat() if self.end_time else None,            "duration_seconds": self.duration_seconds,            "summary": self.summary,            "message_count": self.message_count,            "emotion_analysis": self.emotion_analysis,            "sentiment_score": self.sentiment_score,            "engagement_level": self.engagement_level,            "safety_flags": self.safety_flags,            "response_quality": self.response_quality,            "age_appropriateness": self.age_appropriateness,        }class MessageModel(Base):    """Individual message model within conversations."""    __tablename__ = "messages"    # Primary key    id: Mapped[str] = mapped_column(        UUID(as_uuid=False),        primary_key=True,        default=lambda: str(uuid.uuid4())    )    # Relationships    conversation_id: Mapped[str] = mapped_column(        UUID(as_uuid=False),        ForeignKey("conversations.id", ondelete="CASCADE"),        nullable=False,        index=True    )    # Message content    role: Mapped[str] = mapped_column(String(20), nullable=False)  # user, assistant, system    content: Mapped[str] = mapped_column(Text, nullable=False)    content_type: Mapped[str] = mapped_column(String(20), default="text")    # Message metadata    timestamp: Mapped[datetime] = mapped_column(        DateTime(timezone=True),        default=lambda: datetime.now(timezone.utc),        nullable=False    )    sequence_number: Mapped[int] = mapped_column(Integer, nullable=False)    # Processing information    processing_time_ms: Mapped[Optional[int]] = mapped_column(Integer)    model_used: Mapped[Optional[str]] = mapped_column(String(50))    # Safety analysis    safety_score: Mapped[float] = mapped_column(Float, default=1.0)    moderation_flags: Mapped[dict] = mapped_column(JSONB, default=dict)    filtered_content: Mapped[Optional[str]] = mapped_column(Text)    # Quality metrics    confidence_score: Mapped[float] = mapped_column(Float, default=1.0)    relevance_score: Mapped[float] = mapped_column(Float, default=1.0)    # Relationships    conversation: Mapped["ConversationModel"] = relationship("ConversationModel", back_populates="messages")    # Indexes    __table_args__ = (        Index("idx_message_conversation_seq", "conversation_id", "sequence_number"),        Index("idx_message_role_time", "role", "timestamp"),        Index("idx_message_safety", "safety_score"),    )    def to_dict(self) -> Dict[str, Any]:        """Convert model to dictionary for API responses."""        return {            "id": self.id,            "conversation_id": self.conversation_id,            "role": self.role,            "content": self.content,            "content_type": self.content_type,            "timestamp": self.timestamp.isoformat(),            "sequence_number": self.sequence_number,            "processing_time_ms": self.processing_time_ms,            "safety_score": self.safety_score,            "confidence_score": self.confidence_score,        }