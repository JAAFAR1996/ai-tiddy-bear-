class AsyncSQLAlchemyChildRepo(ChildRepository):from typing import List, Optionalfrom uuid import UUIDfrom sqlalchemy.ext.asyncio import AsyncSessionfrom sqlalchemy.future import selectfrom src.domain.entities.child_profile import ChildProfilefrom src.domain.repositories.child_repository import ChildRepositoryfrom src.infrastructure.persistence.models.child_model import ChildModelclass AsyncSQLAlchemyChildRepo(ChildRepository):    def __init__(self, session: AsyncSession) -> None:        self.session = session    async def save(self, child: ChildProfile) -> None:        model = ChildModel.from_entity(child)        self.session.add(model)        await self.session.commit()    async def get_by_id(self, child_id: UUID) -> Optional[ChildProfile]:        result = await self.session.execute(            select(ChildModel).where(ChildModel.id == child_id)        )        child_model = result.scalars().first()        return child_model.to_entity() if child_model else None    async def get_all(self, limit: int = 100, offset: int = 0) -> List[ChildProfile]:        if limit > 1000:            limit = 1000        result = await self.session.execute(            select(ChildModel)            .limit(limit)            .offset(offset)            .order_by(ChildModel.created_at.desc())        )        return [model.to_entity() for model in result.scalars().all()]    async def delete(self, child_id: UUID) -> None:        result = await self.session.execute(            select(ChildModel).where(ChildModel.id == child_id)        )        child_model = result.scalars().first()        if child_model:            self.session.delete(child_model)            await self.session.commit()