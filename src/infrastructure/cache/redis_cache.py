"""from dataclasses import asdictfrom datetime import datetime, timedeltafrom typing import Any, Dict, List, Optional, Unionimport asyncioimport jsonimport loggingimport redis.asyncio as redis"""Production Redis Caching ImplementationHigh-performance caching layer with comprehensive features"""from src.infrastructure.logging_config import get_loggerlogger = get_logger(__name__, component="infrastructure")class RedisCache:    """    Production-ready Redis caching implementation    Comprehensive caching strategy to solve performance issues    """    def __init__(self, redis_url: str, default_ttl: int = 3600) -> None:        self.redis_url = redis_url        self.default_ttl = default_ttl        self.redis_client: Optional[redis.Redis] = None    async def initialize(self) -> None:        """Initialize Redis connection"""        try:            self.redis_client = redis.from_url(                self.redis_url,                decode_responses=True,                socket_connect_timeout=5,                socket_timeout=5,                retry_on_timeout=True,                max_connections=20            )            # Test connection            await self.redis_client.ping()            logger.info("Redis cache initialized successfully")        except Exception as e:            logger.error(f"Failed to initialize Redis cache: {e}")            raise RuntimeError(f"Cache initialization failed: {e}") from e    async def get(self, key: str) -> Optional[Any]:        """Get value from cache"""        try:            if not self.redis_client:                await self.initialize()            value = await self.redis_client.get(key)            if value:                return json.loads(value)            return None        except Exception as e:            logger.warning(f"Cache get failed for key '{key}': {e}")            return None    async def set(self, key: str, value: Any, ttl: Optional[int] = None) -> bool:        """Set value in cache with TTL"""        try:            if not self.redis_client:                await self.initialize()            ttl = ttl or self.default_ttl            serialized_value = json.dumps(value, default=str)            await self.redis_client.setex(key, ttl, serialized_value)            return True        except Exception as e:            logger.warning(f"Cache set failed for key '{key}': {e}")            return Falseclass CacheKeys:    """Centralized cache key management"""    AI_RESPONSE = "ai_response:{child_id}:{message_hash}"    CHILD_PROFILE = "child_profile:{child_id}"    CONVERSATION_HISTORY = "conversation:{conversation_id}"    RATE_LIMIT = "rate_limit:{user_id}:{endpoint}"    SESSION = "session:{session_id}"    COPPA_CONSENT = "coppa_consent:{parent_id}:{child_id}"    @staticmethod    def format_key(pattern: str, **kwargs) -> str:        """Format cache key with parameters using f-string style"""        return pattern.format(**kwargs)