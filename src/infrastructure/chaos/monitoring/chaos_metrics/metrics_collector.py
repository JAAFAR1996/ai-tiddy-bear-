"""from typing import Listimport asyncioimport loggingfrom .data_models import ChaosMetric, SystemHealthSnapshot"""Metrics Collector Implementation"""from src.infrastructure.logging_config import get_loggerlogger = get_logger(__name__, component="chaos")class ChaosMetricsCollector:    """Advanced metrics collector for chaos experiments"""    def __init__(self) -> None:        self.metrics_buffer: List[ChaosMetric] = []        self.health_snapshots: List[SystemHealthSnapshot] = []        self.collection_interval = 5  # seconds        self.is_collecting = False    async def start_collection(self, experiment_id: str):        """Start metrics collection for experiment"""        self.is_collecting = True        logger.info(f"Starting metrics collection for experiment {experiment_id}")        while self.is_collecting:            try:                # Collect system health snapshot                snapshot = await self._collect_health_snapshot(experiment_id)                self.health_snapshots.append(snapshot)                # Collect individual metrics                metrics = await self._collect_metrics(experiment_id)                self.metrics_buffer.extend(metrics)                await asyncio.sleep(self.collection_interval)            except Exception as e:                logger.error(f"Error collecting metrics: {e}")                await asyncio.sleep(self.collection_interval)    async def stop_collection(self):        """Stop metrics collection"""        self.is_collecting = False        logger.info("Stopped metrics collection")    async def _collect_health_snapshot(self, experiment_id: str) -> SystemHealthSnapshot:        """Collect system health snapshot"""        # Mock implementation        from datetime import datetime        return SystemHealthSnapshot(            timestamp=datetime.now(),            experiment_id=experiment_id,            services_healthy=5,            services_total=5,            avg_response_time=100.0,            error_rate=0.0,            throughput=1000.0,            safety_violations=0        )    async def _collect_metrics(self, experiment_id: str) -> List[ChaosMetric]:        """Collect individual metrics"""        # Mock implementation        from datetime import datetime        return [            ChaosMetric(                timestamp=datetime.now(),                experiment_id=experiment_id,                service_name="ai-service",                metric_name="response_time",                metric_value=95.0,                tags={"environment": "test"}            )        ]    def get_metrics(self) -> List[ChaosMetric]:        """Get collected metrics"""        return self.metrics_buffer.copy()    def get_health_snapshots(self) -> List[SystemHealthSnapshot]:        """Get health snapshots"""        return self.health_snapshots.copy()    def clear_metrics(self) -> None:        """Clear collected metrics"""        self.metrics_buffer.clear()        self.health_snapshots.clear()