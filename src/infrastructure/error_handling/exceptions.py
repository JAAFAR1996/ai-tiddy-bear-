"""from typing import Optional, Dict, Any"""Standardized exception hierarchy for AI Teddy Bear backend.Provides consistent error types and messaging across the application."""class AITeddyError(Exception):    """Base exception for all AI Teddy Bear specific errors."""    def __init__(        self,        message: str,        error_code: Optional[str] = None,        details: Optional[Dict[str, Any]] = None,        http_status: int = 500    ):        super().__init__(message)        self.message = message        self.error_code = error_code or self.__class__.__name__        self.details = details or {}        self.http_status = http_statusclass ValidationError(AITeddyError):    """Raised when input validation fails."""    def __init__(        self,        message: str = "Input validation failed",        field: Optional[str] = None,        value: Optional[str] = None,        **kwargs    ):        details = kwargs.get('details', {})        if field:            details['field'] = field        if value:            details['value'] = str(value)[:100]  # Truncate for security        super().__init__(            message=message,            error_code="VALIDATION_ERROR",            details=details,            http_status=400        )class AuthenticationError(AITeddyError):    """Raised when authentication fails."""    def __init__(        self,        message: str = "Authentication failed",        **kwargs    ):        super().__init__(            message=message,            error_code="AUTHENTICATION_ERROR",            http_status=401,            **kwargs        )class AuthorizationError(AITeddyError):    """Raised when authorization fails."""    def __init__(        self,        message: str = "Access denied",        resource: Optional[str] = None,        action: Optional[str] = None,        **kwargs    ):        details = kwargs.get('details', {})        if resource:            details['resource'] = resource        if action:            details['action'] = action        super().__init__(            message=message,            error_code="AUTHORIZATION_ERROR",            details=details,            http_status=403,            **kwargs        )class NotFoundError(AITeddyError):    """Raised when a resource is not found."""    def __init__(        self,        message: str = "Resource not found",        resource_type: Optional[str] = None,        resource_id: Optional[str] = None,        **kwargs    ):        details = kwargs.get('details', {})        if resource_type:            details['resource_type'] = resource_type        if resource_id:            details['resource_id'] = str(resource_id)        super().__init__(            message=message,            error_code="NOT_FOUND_ERROR",            details=details,            http_status=404,            **kwargs        )class ConflictError(AITeddyError):    """Raised when a resource conflict occurs."""    def __init__(        self,        message: str = "Resource conflict",        **kwargs    ):        super().__init__(            message=message,            error_code="CONFLICT_ERROR",            http_status=409,            **kwargs        )class ExternalServiceError(AITeddyError):    """Raised when external service calls fail."""    def __init__(        self,        message: str = "External service error",        service_name: Optional[str] = None,        original_error: Optional[Exception] = None,        **kwargs    ):        details = kwargs.get('details', {})        if service_name:            details['service_name'] = service_name        if original_error:            details['original_error'] = str(original_error)        super().__init__(            message=message,            error_code="EXTERNAL_SERVICE_ERROR",            details=details,            http_status=502,            **kwargs        )class RateLimitError(AITeddyError):    """Raised when rate limits are exceeded."""    def __init__(        self,        message: str = "Rate limit exceeded",        retry_after: Optional[int] = None,        **kwargs    ):        details = kwargs.get('details', {})        if retry_after:            details['retry_after'] = retry_after        super().__init__(            message=message,            error_code="RATE_LIMIT_ERROR",            details=details,            http_status=429,            **kwargs        )class ChildSafetyError(AITeddyError):    """Raised when child safety violations are detected."""    def __init__(        self,        message: str = "Child safety violation detected",        child_id: Optional[str] = None,        violation_type: Optional[str] = None,        **kwargs    ):        details = kwargs.get('details', {})        if child_id:            # Anonymize child ID for logging            details['child_id'] = f"child_{hash(child_id) % 10000:04d}"        if violation_type:            details['violation_type'] = violation_type        super().__init__(            message=message,            error_code="CHILD_SAFETY_ERROR",            details=details,            http_status=400,            **kwargs        )