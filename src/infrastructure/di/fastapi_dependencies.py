"""from functools import lru_cachefrom typing import Optional, Any, Dictimport loggingfrom fastapi import Depends, HTTPException, statusfrom fastapi.security import HTTPBearer, HTTPAuthorizationCredentialsfrom src.infrastructure.caching.redis_cache_manager import RedisCacheManagerfrom src.infrastructure.config.settings import Settings, get_settingsfrom src.infrastructure.persistence.database import Databasefrom src.infrastructure.security.main_security_service import MainSecurityService, get_security_servicefrom src.infrastructure.security.real_auth_service import ProductionAuthService"""FastAPI Dependency Injection Utilities"""from src.infrastructure.logging_config import get_loggerlogger = get_logger(__name__, component="infrastructure")# Security schemesecurity = HTTPBearer()# Core Dependencies (Singletons)@lru_cache()def get_cached_settings() -> Settings:    """Get cached settings instance"""    return get_settings()@lru_cache()def get_database(settings: Settings = Depends(get_cached_settings)) -> Database:    """Get database connection"""    try:        return Database(str(settings.database.DATABASE_URL))    except Exception as e:        logger.error(f"Database initialization failed: {e}")        # Return mock database for development        from src.infrastructure.persistence.mock_database import MockDatabase        return MockDatabase()@lru_cache()def get_cache(settings: Settings = Depends(get_cached_settings)) -> RedisCacheManager:    """Get cache service"""    try:        return RedisCacheManager(str(settings.redis.REDIS_URL))    except Exception as e:        logger.warning(f"Redis not available, using memory cache: {e}")        from src.infrastructure.caching.memory_cache import MemoryCache        return MemoryCache()@lru_cache()def get_main_security_service() -> MainSecurityService:    """Get main security service"""    return get_security_service()@lru_cache()def get_auth_service(    database: Database = Depends(get_database),    cache: Any = Depends(get_cache)) -> ProductionAuthService:    """Get authentication service"""    return ProductionAuthService(        database_session=database,        redis_cache=cache    )# Authentication Dependenciesasync def get_current_user(    credentials: HTTPAuthorizationCredentials = Depends(security),    auth_service: ProductionAuthService = Depends(get_auth_service)) -> Dict[str, Any]:    """    Get current authenticated user from JWT token.    """    try:        token = credentials.credentials        user_data = await auth_service.verify_token(token)        if not user_data:            raise HTTPException(                status_code=status.HTTP_401_UNAUTHORIZED,                detail="Invalid authentication credentials",                headers={"WWW-Authenticate": "Bearer"},            )        return user_data    except Exception as e:        logger.error(f"Authentication error: {e}")        raise HTTPException(            status_code=status.HTTP_401_UNAUTHORIZED,            detail="Could not validate credentials",            headers={"WWW-Authenticate": "Bearer"},        )async def get_current_parent(    current_user: Dict[str, Any] = Depends(get_current_user)) -> Dict[str, Any]:    """    Verify current user is a parent.    """    if current_user.get("role") != "parent":        raise HTTPException(            status_code=status.HTTP_403_FORBIDDEN,            detail="Access restricted to parents only"        )    return current_userasync def get_current_admin(    current_user: Dict[str, Any] = Depends(get_current_user)) -> Dict[str, Any]:    """    Verify current user is an admin.    """    if current_user.get("role") != "admin":        raise HTTPException(            status_code=status.HTTP_403_FORBIDDEN,            detail="Access restricted to administrators only"        )    return current_user# Service Dependenciesdef get_ai_service(    settings: Settings = Depends(get_cached_settings),    security_service: MainSecurityService = Depends(get_main_security_service)):    """Get AI service instance"""    try:        from src.infrastructure.ai.production_ai_service import ProductionAIService        return ProductionAIService(            api_key=settings.ai.OPENAI_API_KEY,            model=settings.ai.OPENAI_MODEL,            temperature=settings.ai.OPENAI_TEMPERATURE,            max_tokens=settings.ai.OPENAI_MAX_TOKENS        )    except Exception as e:        logger.warning(f"Production AI service not available: {e}")        from src.infrastructure.ai.mock_ai_service import MockAIService        return MockAIService()def get_child_service(    database: Database = Depends(get_database),    cache: Any = Depends(get_cache)):    """Get child management service"""    from src.application.services.child_management_service import ChildManagementService    return ChildManagementService(database=database, cache=cache)def get_conversation_service(    database: Database = Depends(get_database),    ai_service = Depends(get_ai_service),    security_service: MainSecurityService = Depends(get_main_security_service)):    """Get conversation service"""    from src.application.services.conversation_service import ConversationService    return ConversationService(        database=database,        ai_service=ai_service,        security_service=security_service    )# Utility Dependenciesasync def verify_child_access(    child_id: str,    current_parent: Dict[str, Any] = Depends(get_current_parent),    child_service = Depends(get_child_service)) -> bool:    """    Verify parent has access to specified child.    """    # Check if parent owns this child    children = await child_service.get_children_by_parent(current_parent["user_id"])    child_ids = [child.id for child in children]    if child_id not in child_ids:        raise HTTPException(            status_code=status.HTTP_403_FORBIDDEN,            detail="You don't have access to this child's data"        )    return True# Request Context Dependenciesasync def get_request_context(    current_user: Optional[Dict[str, Any]] = Depends(get_current_user)) -> Dict[str, Any]:    """    Get request context for logging and tracking.    """    return {        "user_id": current_user.get("user_id") if current_user else None,        "user_role": current_user.get("role") if current_user else None,        "timestamp": datetime.utcnow().isoformat()    }# Export common dependencies for easy import__all__ = [    # Settings    "get_cached_settings",    # Core services    "get_database",    "get_cache",    "get_main_security_service",    "get_auth_service",    # Authentication    "get_current_user",    "get_current_parent",    "get_current_admin",    # Services    "get_ai_service",    "get_child_service",    "get_conversation_service",    # Utilities    "verify_child_access",    "get_request_context"]