"""from abc import ABC, abstractmethodfrom typing import Any, Dict, Optionalfrom uuid import UUID"""Security-related interfaces for the domain layer.These interfaces define contracts for security services withoutcreating dependencies on infrastructure implementations."""class IEncryptionService(ABC):    """Interface for encryption operations."""    @abstractmethod    async def encrypt(self, data: str) -> str:        """Encrypt sensitive data."""        pass    @abstractmethod    async def decrypt(self, encrypted_data: str) -> str:        """Decrypt sensitive data."""        pass    @abstractmethod    async def hash_password(self, password: str) -> str:        """Hash a password securely."""        pass    @abstractmethod    async def verify_password(self, password: str, hashed: str) -> bool:        """Verify a password against its hash."""        passclass ISecurityService(ABC):    """Interface for security validation and monitoring."""    @abstractmethod    async def validate_child_access(self, parent_id: UUID, child_id: UUID) -> bool:        """Validate that a parent has access to a child's data."""        pass    @abstractmethod    async def log_security_event(self, event_type: str, data: Dict[str, Any]) -> None:        """Log a security-related event for audit purposes."""        pass    @abstractmethod    async def validate_content_safety(self, content: str) -> Dict[str, Any]:        """Validate content for child safety."""        pass